import DI from '../DescriptiveIncident';
import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import { _CantBeResized } from '../../_configuration/rejectionReasons';

const staggerTenThousand = '@stagger(100, 1000)';

const di = new DI(
  {
    a: 'a',
    b: 'b',
  },
  {
    duration: 1,
    c: 'c',
    d: 'd',
  },
);

test('DI1. Wrong properties check', () => {
  const di2 = new DI(
    {
      a: 'a',
      b: 'b',
    },
    {
      duration: -1,
      repeats: -1,
      hiatus: -1,
      delay: -1,
      c: 'c',
      d: 'd',
    },
  );
  expect(di2.result).toBe(false);
  expect(di2.errors.length).toBe(8);
});

test('DI2. editing attributes on an unassigned DI should pass', () => {
  const res = di.editAttributes({ a: 'a1', b: 'b1' });
  expect(res).toEqual({
    result: true,
  });

  expect(di.attrs).toEqual({
    a: 'a1',
    b: 'b1',
  });
});

test('DI3. editing properties by passing worng parameters should return result false with errors', () => {
  const res = di.editProperties({
    duration: -1,
    hiatus: -1,
    delay: -1,
    repeats: -1,
  });

  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(8);
});

test('DI4. editing properties on an unassigned DI should pass', () => {
  const res = di.editProperties({ c: 'c1', d: 'd1', duration: 1 });
  expect(res).toEqual({
    result: true,
  });

  expect(di.props).toEqual({
    c: 'c1',
    d: 'd1',
    duration: 1,
  });
});

test('DI5. initialise DI with name', () => {
  const di2 = new DI(
    {
      a: 'a',
      b: 'b',
    },
    {
      duration: 1,
      c: 'c',
      d: 'd',
      name: 'test',
    },
  );
  expect(di2.name).toBe('test');
});

test('DI6. Edit the name of the DI', () => {
  di.name = 'test';
  expect(di.name).toBe('test');
});

test('DI7. A DI with dynamic duration should return "dynamic" on .duration', () => {
  const di = new DI(
    {
      a: 1,
    },
    {
      duration: staggerTenThousand,
    },
  );

  expect(di.duration).toBe('dynamic');
});

test('DI18. A DI with dynamic duration should get its real duration when entering a Clip', () => {
  document.body.innerHTML = `
        <div id="my-root-clip"></div>
        <div id="my-copy-clip"></div>
    `;
  const host = document.getElementById('my-root-clip');

  const myHostedClip = new DC({
    html: `<div>
            <div class="a" data-motorcortex2-id="myRootClip-1"></div>
            <div class="a" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'my-hosted-clip',
  });

  const di = new DI(
    {
      animatedAttrs: { a: 1 },
    },
    {
      duration: staggerTenThousand,
      selector: '.a',
    },
  );

  myHostedClip.addIncident(di, 1000);
  expect(myHostedClip.duration).toBe(2000);
  expect(di.duration).toBe(1000);
});

test('DI9. A DI with dynamic duration can not be resized', () => {
  const di = new DI(
    {
      a: 1,
    },
    {
      duration: staggerTenThousand,
    },
  );

  const res = di.resize(1000);
  expect(res.result).toBe(false);
  expect(res.reason).toBe(_CantBeResized);
});

test('DI10. Clone Incident with the exact same attrs & props', () => {
  const di = new DI(
    {
      animatedAttrs: {
        a: 1,
      },
      b: 'test',
    },
    {
      duration: staggerTenThousand,
      selector: '.test',
      delay: 200,
      id: 'di_id',
    },
  );

  const diClone = di.clone();
  expect(diClone.attrs).toEqual({
    animatedAttrs: {
      a: 1,
    },
    b: 'test',
  });
  expect({ ...diClone.props, id: 'diclone_id' }).toEqual({
    duration: staggerTenThousand,
    selector: '.test',
    delay: 200,
    id: 'diclone_id',
  });
});

test('DI11. Clone Incident altering its attrs in valid way', () => {
  const di = new DI(
    {
      animatedAttrs: {
        a: 1,
      },
      b: 'test',
    },
    {
      duration: staggerTenThousand,
      selector: '.test',
      delay: 200,
      id: 'di_id',
    },
  );

  const diClone = di.clone({ 'animatedAttrs.a': 2, b: 'test2' });
  expect(diClone.attrs).toEqual({
    animatedAttrs: {
      a: 2,
    },
    b: 'test2',
  });
  expect({ ...diClone.props, id: 'diclone_id' }).toEqual({
    duration: staggerTenThousand,
    selector: '.test',
    delay: 200,
    id: 'diclone_id',
  });
});

test('DI12. Clone Incident altering its props in valid way', () => {
  const di = new DI(
    {
      animatedAttrs: {
        a: 1,
      },
      b: 'test',
    },
    {
      duration: staggerTenThousand,
      selector: '.test',
      delay: 200,
      id: 'di_id',
    },
  );

  const diClone = di.clone({}, { duration: 1000, id: 'diclone_id' });
  expect(diClone.attrs).toEqual({
    animatedAttrs: {
      a: 1,
    },
    b: 'test',
  });
  expect(diClone.props).toEqual({
    duration: 1000,
    selector: '.test',
    delay: 200,
    id: 'diclone_id',
  });
});

test('DI13. Clone Incident altering its props in invalid way', () => {
  const di = new DI(
    {
      animatedAttrs: {
        a: 1,
      },
      b: 'test',
    },
    {
      duration: staggerTenThousand,
      selector: '.test',
      delay: 200,
      id: 'di_id',
    },
  );

  const diClone = di.clone({}, { duration: 'wrong', id: 'diclone_id' });
  expect(diClone.result).toBe(false);
});

test('DI14. Check the report of setupDynamicValues', () => {
  const di = new DI(
    {
      animatedAttrs: {
        a: '@pattern(0,100)',
        b: '@pattern(1, 2)',
        c: '@expression(initParams.x)',
        d: '@attribute(data-value)',
      },
      b: '@pattern(0,100,200)',
    },
    {
      duration: staggerTenThousand,
      selector: '.test',
      delay: '@stagger(100, 1000)',
      hiatus: '@expression(initParams.y)',
      id: 'di_id',
    },
  );
  const report = di.setupDynamicValues();
  expect(report).toEqual({
    attrs: { pattern: 3, expression: 1, attribute: 1 },
    props: { stagger: 2, expression: 1 },
  });
});
