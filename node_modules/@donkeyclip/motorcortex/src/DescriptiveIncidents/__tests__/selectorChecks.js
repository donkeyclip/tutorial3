import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import { _MC_Attribute } from '../../_configuration/_CONST';
import DG from '../DescriptiveGroup';
import DI from '../DescriptiveIncident';

const descInc0Id = 'desc-inc-0';
const descInc1Id = 'desc-inc--1';
const relativeSelector = '&.my-class';

test(`When a null selector Incident, or a realative selector Incident that does not
    inherit selectors from its parent enters a Clip the addition should be rejected`, () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');

  const DC0 = new DC({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'DC0',
  });

  const nullSelectorIncident = new DI(
    {
      animatedAttrs: { alpha: 2 },
    },
    {
      duration: 1000,
      id: descInc1Id,
    },
  );

  const relativeSelectorIncident = new DI(
    {
      animatedAttrs: {
        beta: 2,
      },
    },
    {
      selector: relativeSelector,
      duration: 3000,
      id: descInc0Id,
    },
  );

  const noSelectorGroup = new DG({ id: 'no-selector-group' });

  noSelectorGroup.addIncident(nullSelectorIncident, 0);
  noSelectorGroup.addIncident(relativeSelectorIncident, 3000);

  const res = DC0.addIncident(noSelectorGroup);
  expect(res.errors.length).toBe(2);
  expect(res.result).toBe(false);
  expect(res.errors[0]).toEqual({
    id: descInc1Id,
    ClassName: 'Incident',
    plugin_npm_name: _MC_Attribute,
    error: 'null selector',
  });
  expect(res.errors[1]).toEqual({
    id: descInc0Id,
    ClassName: 'Incident',
    plugin_npm_name: _MC_Attribute,
    error: 'relative selector with no inherited selector',
    selector: relativeSelector,
  });
});

test(`When a null selector Incident, or a realative selector Incident directly enters
    the timeline of a Clip the addition should be rejected`, () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');
  const DC0 = new DC({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'DC0',
  });

  const nullSelectorIncident = new DI(
    {
      animatedAttrs: { alpha: 2 },
    },
    {
      duration: 1000,
      id: descInc1Id,
    },
  );

  const relativeSelectorIncident = new DI(
    {
      animatedAttrs: {
        beta: 2,
      },
    },
    {
      selector: relativeSelector,
      duration: 3000,
      id: descInc0Id,
    },
  );

  const res1 = DC0.addIncident(nullSelectorIncident, 0);
  const res2 = DC0.addIncident(relativeSelectorIncident, 3000);
  expect(res1.result).toBe(false);
  expect(res2.result).toBe(false);
  expect(res1.errors[0]).toEqual({
    id: descInc1Id,
    ClassName: 'Incident',
    plugin_npm_name: _MC_Attribute,
    error: 'null selector',
  });
  expect(res2.errors[0]).toEqual({
    id: descInc0Id,
    ClassName: 'Incident',
    plugin_npm_name: _MC_Attribute,
    error: 'relative selector with no inherited selector',
    selector: relativeSelector,
  });
});
