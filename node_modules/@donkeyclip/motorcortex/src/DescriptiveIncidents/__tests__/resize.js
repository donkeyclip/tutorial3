/* eslint-disable sonarjs/no-duplicate-string */
import TesterClass from '../../../tester/Tester';
import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import { _SizeBiggerThanZero } from '../../_configuration/rejectionReasons';
import { _MC_Attribute } from '../../_configuration/_CONST';
import DG from '../DescriptiveGroup';
/** ***************** DESCRIPTIVE INCIDENT ******************* */
import DI from '../DescriptiveIncident';
import { descriptiveTree } from './states/resize_state_1';
import {
  descriptiveTree as state10,
  lanes as lanes10,
  realTree as realTree10,
} from './states/resize_state_10';
import {
  descriptiveTree as state11,
  lanes as lanes11,
  realTree as realTree11,
} from './states/resize_state_11';
import { descriptiveTree as state2 } from './states/resize_state_2';
import { descriptiveTree as state3 } from './states/resize_state_3';
import {
  descriptiveTree as state4,
  lanes,
  realTree,
} from './states/resize_state_4';
import {
  descriptiveTree as state5,
  lanes as lanes5,
  realTree as realTree5,
} from './states/resize_state_5';
import {
  descriptiveTree as resizeState5,
  lanes as lanesResize5,
  realTree as realTreeResize5,
} from './states/resize_state_5-sub';
import {
  descriptiveTree as state6,
  lanes as lanes6,
  realTree as realTree6,
} from './states/resize_state_6';
import {
  descriptiveTree as resizeState6,
  lanes as lanesResize6,
  realTree as realTreeResize6,
} from './states/resize_state_6-sub';
import {
  descriptiveTree as state7,
  lanes as lanes7,
  realTree as realTree7,
} from './states/resize_state_7';
import {
  descriptiveTree as resizeState7,
  lanes as lanesResize7,
  realTree as realTreeResize7,
} from './states/resize_state_7-sub';
import {
  descriptiveTree as state8,
  lanes as lanes8,
  realTree as realTree8,
} from './states/resize_state_8';
import {
  descriptiveTree as state9,
  lanes as lanes9,
  realTree as realTree9,
} from './states/resize_state_9';
import {
  descriptiveTree as resizeState9,
  lanes as lanesResize9,
  realTree as realTreeResize9,
} from './states/resize_state_9-sub';

const Tester = new TesterClass();

let myClip;

const di = new DI(
  {
    animatedAttrs: { alpha: 2 },
  },
  {
    duration: 1000,
    id: 'desc-inc-1',
    selector: '.my-class',
  },
);

const dg = new DG({ id: 'desc-group-1' });
const dg2 = new DG({ id: 'desc-group-2' });

const di2 = new DI(
  {
    animatedAttrs: {
      alpha: 2,
    },
  },
  {
    selector: '.my-class',
    duration: 3000,
    id: 'desc-inc-2',
  },
);

const di3 = new DI(
  {
    animatedAttrs: {
      alpha: 4,
    },
  },
  {
    selector: '.my-class',
    duration: 1000,
    id: 'desc-inc-3',
  },
);

// CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000
const casi = new DC({
  html: `
            <div id="my-root-div-2">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
  css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
  selector: '.clip-host',
  id: 'casi',
});

const casiIncident = new DI(
  {
    animatedAttrs: {
      alpha: 3,
    },
  },
  {
    id: 'casi-incident',
    selector: '.my-class',
    duration: 2000,
  },
);

casi.addIncident(casiIncident, 1000);
// END OF CONSTRUCT THE CLIP AS INCIDENT AND PUT AN INCIDENT TO IT ON MS 1000

test('Resize a Descriptive Incident outside of a Clip should return true and alter its duration', () => {
  const res = di.resize(2000);
  expect(res).toEqual({
    result: true,
  });

  expect(di.duration).toBe(2000);
});

test(`Try to resize a DescriptiveIncident outside of a Clip by providing the exact same duration should return true but
    should also not be processed`, () => {
  const res = di.resize(2000);

  expect(res.result).toBe(true);
  expect(res.meta.unprocessed).toBe(true);

  expect(di.duration).toBe(2000);
});

test('Try to resize a DescriptiveIncident outside of a Clip by providing negative (or zero) size', () => {
  const res = di.resize(-1);

  expect(res.result).toBe(false);
  expect(res.reason).toBe(_SizeBiggerThanZero);
});

// /******************* DESCRIPTIVE GROUP ********************/

test('Resize a Descriptive tree outside of a Clip including one Descriptive Incident', () => {
  dg.addIncident(di, 1000);
  const res = dg.resize(1500);
  expect(res.result).toBe(true);

  const realTreeTest = Tester.testTree(descriptiveTree, dg);
  expect(realTreeTest).toHaveNoErros();
});

test('Resize a full Descriptive tree outside of a Clip', () => {
  dg2.addIncident(di2, 800);
  dg.addIncident(dg2, 3000);

  const res = dg.resize(3400);
  expect(res.result).toBe(true);

  const realTreeTest = Tester.testTree(state2, dg);
  expect(realTreeTest).toHaveNoErros();
});

test('Resize a Descriptive Incident affecting the duration of its parents, outside of a Clip', () => {
  const res = di2.resize(5000);
  expect(res.result).toBe(true);

  const realTreeTest = Tester.testTree(state3, dg);
  expect(realTreeTest).toHaveNoErros();
});

test('Resize a Group within a real Clip', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
                <div id="element-3" class="class-1" data-motorcortex2-id="class-1"></div>
                <div class="clip-host" data-motorcortex2-id="clip-host-1"></div>
                <div class="clip-host" data-motorcortex2-id="clip-host-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  myClip.addIncident(dg, 1000);
  const res = dg.resize(3450);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state4, myClip);
  const realTreeTest = Tester.testTree(realTree, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});

test('Resize an Incident in a way that it conflicts. The resize should be rejected', () => {
  const res = di.resize(4000);
  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(2);
  expect(res.errors[0].type).toBe(
    'unauthorized overlapping animations on the same element',
  );
  expect(res.errors[1].type).toBe(
    'unauthorized overlapping animations on the same element',
  );

  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state4, myClip);
  const realTreeTest = Tester.testTree(realTree, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});

test('Resize a Clip which contains Clips as Inicdents', () => {
  const res = myClip.addIncident(casi, 1000);
  expect(res.result).toBe(true);

  // ROOT CLIP TESTS
  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  let descTreeTest = Tester.testTree(state5, myClip);
  let realTreeTest = Tester.testTree(realTree5, myClip.realClip);
  let lanesTest = Tester.testLanes(lanes5, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  // SUBCLIP TESTS
  const s_lh = casi.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  let sub_descTreeTest = Tester.testTree(resizeState5, casi);
  let sub_realTreeTest = Tester.testTree(realTreeResize5, casi.realClip);
  let sub_lanesTest = Tester.testLanes(
    lanesResize5,
    s_lh.lanes,
    s_lh.incidentsById,
  );
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();

  // RESIZE
  const res2 = myClip.resize(890);
  expect(res2.result).toBe(true);

  // ROOT CLIP TESTS AFTER RESIZE
  descTreeTest = Tester.testTree(state6, myClip);
  realTreeTest = Tester.testTree(realTree6, myClip.realClip);
  lanesTest = Tester.testLanes(lanes6, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  // SUBCLIP TESTS
  sub_descTreeTest = Tester.testTree(resizeState6, casi);
  sub_realTreeTest = Tester.testTree(realTreeResize6, casi.realClip);
  sub_lanesTest = Tester.testLanes(
    lanesResize6,
    s_lh.lanes,
    s_lh.incidentsById,
  );
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});

test('Resize directly a Clip as Incident belonging to a hosted clip. Expect to pass', () => {
  const res = casi.resize(1200);
  expect(res.result).toBe(true);
  expect(casi.duration).toBe(1200);

  // ROOT CLIP TESTS
  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state7, myClip);
  const realTreeTest = Tester.testTree(realTree7, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes7, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  // SUBCLIP TESTS
  const s_lh = casi.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const sub_descTreeTest = Tester.testTree(resizeState7, casi);
  const sub_realTreeTest = Tester.testTree(realTreeResize7, casi.realClip);
  const sub_lanesTest = Tester.testLanes(
    lanesResize7,
    s_lh.lanes,
    s_lh.incidentsById,
  );
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});

test('Resize a Group containing a Clip as Incident. Expect the resize to pass', () => {
  myClip.removeIncident('casi');
  dg.addIncident(casi, 0);

  // ROOT CLIP TESTS
  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  let descTreeTest = Tester.testTree(state8, myClip);
  let realTreeTest = Tester.testTree(realTree8, myClip.realClip);
  let lanesTest = Tester.testLanes(lanes8, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  // SUBCLIP TESTS
  const s_lh = casi.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  let sub_descTreeTest = Tester.testTree(resizeState7, casi);
  let sub_realTreeTest = Tester.testTree(realTreeResize7, casi.realClip);
  let sub_lanesTest = Tester.testLanes(
    lanesResize7,
    s_lh.lanes,
    s_lh.incidentsById,
  );
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();

  // RESIZE
  const res = dg.resize(2400);
  expect(res.result).toBe(true);

  // ROOT CLIP TESTS AFTER RESIZE
  descTreeTest = Tester.testTree(state9, myClip);
  realTreeTest = Tester.testTree(realTree9, myClip.realClip);
  lanesTest = Tester.testLanes(lanes9, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
  // SUBCLIP TESTS AFTER RESIZE
  sub_descTreeTest = Tester.testTree(resizeState9, casi);
  sub_realTreeTest = Tester.testTree(realTreeResize9, casi.realClip);
  sub_lanesTest = Tester.testLanes(
    lanesResize9,
    s_lh.lanes,
    s_lh.incidentsById,
  );
  expect(sub_descTreeTest).toHaveNoErros();
  expect(sub_realTreeTest).toHaveNoErros();
  expect(sub_lanesTest).toHaveNoErros();
});

test("Resize an Incident inside a real Clip, in a way that it affects the Clip's duration (makes it bigger)", () => {
  const res = di2.resize(3000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state10, myClip);
  const realTreeTest = Tester.testTree(realTree10, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes10, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});

test("Resize an Incident inside a real Clip, in a way that it affects the Clip's duration (makes it shorter)", () => {
  const res = di2.resize(1000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state9, myClip);
  const realTreeTest = Tester.testTree(realTree9, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes9, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});

test('Resize an Incident which is direct child of a Clip, in a way it makes the Clip bigger', () => {
  const res = myClip.addIncident(di3, 4000);
  expect(res.result).toBe(true);

  const resizeRes = di3.resize(2000);
  expect(resizeRes.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[_MC_Attribute].LanesHandler;
  const descTreeTest = Tester.testTree(state11, myClip);
  const realTreeTest = Tester.testTree(realTree11, myClip.realClip);
  const lanesTest = Tester.testLanes(lanes11, lh.lanes, lh.incidentsById);
  expect(descTreeTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
  expect(lanesTest).toHaveNoErros();
});
