import { AudioClip, AudioPlayback, loadPlugin } from '../../main';

let dac;
test(`DAC.01 Create a new DescriptiveAudioClip`, () => {
  dac = new AudioClip(
    {
      x: 1,
      y: 2,
    },
    {
      audioSources: [
        {
          src: './my.mp3',
          id: 'my-mp3',
          classes: ['songs', 'rock'],
          base64: false,
        },
      ],
    },
  );
  expect(dac).toBeInstanceOf(AudioClip);
  expect(dac.attrs).toEqual({
    x: 1,
    y: 2,
  });
});

test(`DAC.02 Add an AudioPlayback to the AudioClip`, () => {
  const songPlayback = new AudioPlayback({
    selector: '~#my-mp3',
    startFrom: 12000,
    duration: 60000,
  });
  const res = dac.addIncident(songPlayback, 1000);
  expect(res).toEqual({ result: true });
});

test(`DAC.03 Extending an AudioClip on a plugin`, () => {
  class MyPluginAudio extends AudioClip {
    get audioSources() {
      return [
        {
          src: `./${this.attrs.audio}.mp3`,
          id: 'my-mp3',
          classes: ['songs', 'rock'],
          base64: false,
        },
      ];
    }

    buildTree() {
      const playback = new AudioPlayback({
        selector: '~#my-mp3',
        startFrom: 12000,
        duration: 60000,
      });
      this.addIncident(playback, 0);
    }
  }

  const testPlugin = {
    npm_name: 'test-plugin',
    incidents: [
      {
        exportable: MyPluginAudio,
        name: 'MyAudio',
      },
    ],
  };
  const MyPlugin = loadPlugin(testPlugin);
  const testInc = new MyPlugin.MyAudio({
    audio: 'test',
  });
  expect(testInc).toBeInstanceOf(AudioClip);
  expect(testInc.audioSources).toEqual([
    {
      src: `./test.mp3`,
      id: 'my-mp3',
      classes: ['songs', 'rock'],
      base64: false,
    },
  ]);
});
