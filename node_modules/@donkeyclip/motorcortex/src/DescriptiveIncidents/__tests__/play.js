import { HTMLClip, loadPlugin, Effect } from '../../main';

const DC = HTMLClip;

let loggedValues = [];
// eslint-disable-next-line sonarjs/no-unused-collection
const mss = [];
// eslint-disable-next-line sonarjs/no-unused-collection
const clipsMss = [];
const clipsStates = [];

let myClip;

/** ************************* PLUGIN DEFINITION ************************ */
/** ******************************************************************* */
class MyPluginIncident extends Effect {
  onGetContext() {}

  onProgress(ms) {
    const fraction = this.getFraction(ms);
    // eslint-disable-line no-unused-vars
    const { initialValue } = this;
    const { targetValue } = this;
    const value = initialValue + (targetValue - initialValue) * fraction;
    loggedValues.push(parseInt(value));
    mss.push(ms);
    clipsMss.push(myClip.runTimeInfo.currentMillisecond);
  }

  getScratchValue() {
    // eslint-disable-line no-unused-vars
    return 0;
  }
}

/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin0 = {
  npm_name: '@donkeyclip/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
    },
  ],
};

const TestPlugin0 = loadPlugin(testPlugin0);
const DI = TestPlugin0.MPInc;

const di1 = new DI(
  {
    animatedAttrs: {
      alpha: 10,
    },
  },
  {
    id: 'test-incident-1',
    selector: '#element-1',
    duration: 1000,
  },
);

test('Test single execution with steps of 100ms', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  myClip.addIncident(di1, 1000);

  // step 1 / emulated play() command
  myClip.play(true);
  loggedValues = [];
  for (let i = 0; i < 25; i++) {
    myClip.step(i * 100, true);
    clipsStates.push(myClip.runTimeInfo.state);
  }

  expect(clipsStates).toEqual([
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'playing',
    'idle',
    'idle',
    'idle',
    'idle',
    'idle',
  ]);
  expect(loggedValues).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
});

// test('Test pause / resume functionality', done => {
//     // step 1 / emulated play() command
//     myClip.play(true);
//     loggedValues = [];
//     clipsStates = [];
//     for (let i = 0; i < 5; i++) {
//         myClip.step(i * 300, true);
//         clipsStates.push(myClip.runTimeInfo.state);
//     }
//     myClip.pause();
//     // we pause on purpose many tines to make sure we don't break it
//     myClip.pause();
//     myClip.pause();

//     const delay = 270;
//     setTimeout(() => {
//         myClip.play(true);
//         for (let i = 5; i < 8; i++) {
//             myClip.step(i * 300 + delay, true);
//             clipsStates.push(myClip.runTimeInfo.state);
//         }
//         expect(clipsStates).toEqual(
//             ['playing', 'playing', 'playing', 'playing', 'playing',
//                 'playing', 'playing', 'idle'
//             ]
//         );

//         const expectation = [2, 5, 8, 10];
//         for (let i = 0; i < loggedValues.length; i++) {
//             expect(loggedValues[i]).toBeCloseTo(expectation[i], 1);
//         }

//         done();
//     }, delay);
// });
