/* eslint-disable sonarjs/no-duplicate-string */
import * as MotorCortex from '../../main';
import MCDI from '../DescriptiveIncident';
const Group = MotorCortex.Group;
const HTMLClip = MotorCortex.HTMLClip;

class Animation extends MotorCortex.HTMLClip {
  get html() {
    return `<div>
      <div class="a"></div>
    </div>`;
  }

  get css() {
    return `div{width:40px; height:40px;}`;
  }

  buildTree() {
    for (let i = 0; i < this.attrs.number; i++) {
      const myIncident = new MCDI(
        {
          animatedAttrs: {
            test: 200,
          },
        },
        {
          duration: 2000,
          selector: '.a',
        },
      );
      this.addIncident(myIncident, i * 2000);
    }
  }
}

/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin0 = {
  npm_name: '@donkeyclip/test-plugin-0',
  name: 'Test Plugin 0',
  incidents: [
    {
      exportable: Animation,
      name: 'Animation',
    },
  ],
};
const TestPlugin = MotorCortex.loadPlugin(testPlugin0);

test('AD01. Creating a new Animation as CAsI without passing duration should result to original dimension of the Animation', () => {
  const clip = new TestPlugin.Animation( // pure duration: 6000
    {
      number: 3,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
    },
  );

  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(6000);
  expect(clip.duration).toBe(6000);
  expect(clip.realClip.duration).toBe(6000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(6000);
});

test('AD02. Creating a new Animation as root Clip without passing duration should result to original dimension of the Animation', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;

  const cfdHost = document.getElementById('clip-container');

  const clip = new TestPlugin.Animation( // 6000
    {
      number: 3,
    },
    {
      host: cfdHost,
      id: 'my-clip',
    },
  );

  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(6000);
  expect(clip.duration).toBe(6000);
  expect(clip.realClip.duration).toBe(6000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(6000);
});

test('AD03. Creating a new Animation as CAsI passing duration', () => {
  const clip = new TestPlugin.Animation(
    {
      number: 3,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
      duration: 3000,
    },
  );

  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(3000);
  expect(clip.duration).toBe(3000);
  expect(clip.realClip.duration).toBe(6000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(3000);
});

test('AD04. Creating a new Animation as root Clip passing duration', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;

  const cfdHost = document.getElementById('clip-container');

  const clip = new TestPlugin.Animation(
    {
      number: 3,
    },
    {
      host: cfdHost,
      duration: 3000,
      id: 'my-clip',
    },
  );

  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(3000);
  expect(clip.duration).toBe(3000);
  expect(clip.realClip.duration).toBe(6000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(3000);
});

test(`AD05. Creating a new Animation as CAsI without passing duration
  and resizing it should give the right duration on its props`, () => {
  const clip = new TestPlugin.Animation( // 6000
    {
      number: 3,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
    },
  );
  clip.resize(1500);
  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(1500);
  expect(clip.duration).toBe(1500);
  expect(clip.realClip.duration).toBe(1500);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(1500);
});

test(`AD06. Creating a new Animation as root without passing duration
  and resizing it should give the right duration on its props`, () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;

  const cfdHost = document.getElementById('clip-container');

  const clip = new TestPlugin.Animation(
    {
      number: 3,
    },
    {
      host: cfdHost,
      id: 'my-clip',
    },
  );

  clip.resize(1500);
  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(1500);
  expect(clip.duration).toBe(1500);
  expect(clip.realClip.duration).toBe(1500);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(1500);
});

test(`AD07. Creating a new Animation as CAsI without passing duration
  and resizing the Group it belongs to should properly affect all durations`, () => {
  const clip = new TestPlugin.Animation( // 6000
    {
      number: 3,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
    },
  );

  const group = new Group();
  group.addIncident(clip, 0);

  group.resize(1500);
  const def = clip.exportDefinition();
  expect(def.props.duration).toBe(1500);
  expect(clip.duration).toBe(1500);
  expect(clip.realClip.duration).toBe(1500);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  const liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(1500);
});

test(`AD08. Creating an Animation by passing delay, hiatus, repeats and duration and resizing it should give the right duration data`, () => {
  const clip = new TestPlugin.Animation(
    {
      number: 3,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
      duration: 1700,
      hiatus: 100,
      delay: 150,
      repeats: 2,
    },
  );

  let def = clip.exportDefinition();
  expect(def.props.duration).toBe(1700);
  expect(clip.duration).toBe(3900);
  expect(clip.realClip.duration).toBe(6000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  let liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(1700);

  clip.resize(1950);
  def = clip.exportDefinition();
  expect(def.props.duration).toBe(850);
  expect(def.props.hiatus).toBe(50);
  expect(def.props.delay).toBe(75);
  expect(def.props.repeats).toBe(2);
  expect(clip.duration).toBe(1950);
  expect(clip.hiatus).toBe(50);
  expect(clip.delay).toBe(75);
  expect(clip.realClip.duration).toBe(3000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(850);
});

test(`AD09. Creating an Animation by not passing duration but by passing delay, hiatus, repeats and resizing it should give the right duration data`, () => {
  const clip = new TestPlugin.Animation( // 2000 ms pure duration
    {
      number: 1,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
      hiatus: 100,
      delay: 150,
      repeats: 2,
    },
  );

  let def = clip.exportDefinition();
  expect(def.props.duration).toBe(2000);
  expect(clip.duration).toBe(4500);
  expect(clip.realClip.duration).toBe(2000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
  let liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(2000);

  clip.resize(9000);
  def = clip.exportDefinition();
  expect(def.props.duration).toBe(4000);
  expect(def.props.hiatus).toBe(200);
  expect(def.props.delay).toBe(300);
  expect(def.props.repeats).toBe(2);
  expect(clip.duration).toBe(9000);
  expect(clip.hiatus).toBe(200);
  expect(clip.delay).toBe(300);
  liveDef = clip.exportLiveDefinition();
  expect(liveDef.props.duration).toBe(4000);

  expect(clip.realClip.duration).toBe(4000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
});

test(`AD10. Create an Animation without setting duration, put it on a Clip and resize the Clip`, () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;
  const cfdHost = document.getElementById('clip-container');
  const clip = new HTMLClip({
    html: '<div class="a-selector"></div>',
    host: cfdHost,
    id: 'root-clip',
  });

  const animation = new TestPlugin.Animation( // 2000 pure duration, 4500 full
    {
      number: 1,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
      hiatus: 100,
      delay: 150,
      repeats: 2,
    },
  );

  clip.addIncident(animation, 0);

  expect(clip.duration).toBe(4500);
  expect(clip.realClip.duration).toBe(4500);

  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);

  const res = clip.resize(9000);
  expect(res.result).toBe(true);
  expect(animation.duration).toBe(9000);
  const def = animation.exportDefinition();
  expect(def.props.duration).toBe(4000);

  expect(clip.realClip.duration).toBe(9000);
  expect(clip.calculatedDuration).toEqual(clip.realClip.duration);
});

test(`AD11. Create an Animation by setting duration, put it on a Clip and resize the Clip`, () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;
  const cfdHost = document.getElementById('clip-container');
  const clip = new HTMLClip({
    html: `<div>
        <div class="a-selector"></div>
       </div>`,
    host: cfdHost,
    id: 'root-clip',
  });

  const animation = new TestPlugin.Animation( // 2000 ms pure duration
    {
      number: 1,
    },
    {
      selector: '.a-selector',
      id: 'my-clip',
      duration: 1700,
      hiatus: 100,
      delay: 150,
      repeats: 2,
    },
  );

  clip.addIncident(animation, 0);
  expect(animation.duration).toBe(3900);
  expect(clip.duration).toBe(3900);

  const res = clip.resize(7800);
  expect(res.result).toBe(true);
  expect(animation.duration).toBe(7800);
  const def = animation.exportDefinition();
  expect(def.props.duration).toBe(3400);
});
