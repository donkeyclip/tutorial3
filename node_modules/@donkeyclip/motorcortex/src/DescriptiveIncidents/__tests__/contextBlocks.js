import * as MotorCortex from '../../main';
const loadPlugin = MotorCortex.loadPlugin;

let getContextLogs = [];
let scratchValueLogs = [];

class MyPluginClip extends MotorCortex.BrowserClip {
  get html() {
    return () =>
      `<div>
        <div id="element-1"></div>
        <div id="element-2"></div>
      </div>`;
  }

  onAfterRender() {
    this.contextLoading();
  }
}

class MyPluginIncident extends MotorCortex.Effect {
  onGetContext() {
    getContextLogs.push('MyPluginIncident');
  }

  getScratchValue() {
    scratchValueLogs.push('MyPluginIncident');
    return 14;
  }
}

const pluginNpm = '@donkeyclip/test-plugin';
const testPlugin = {
  npm_name: pluginNpm,
  name: 'Test Plugin',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
    },
  ],
  audio: 'on',
  Clip: MyPluginClip,
};

const TestPlugin = loadPlugin(testPlugin);

test('01. Test hosted Plugin Clip context loading block', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  const myClip = new TestPlugin.Clip({
    id: 'hosted-plugin-clip',
    host: document.getElementById('clip-container'),
  });
  const inc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        a: 2,
      },
    },
    {
      duration: 2000,
      id: 'my-plugin-incident',
      selector: '#element-1',
    },
  );

  myClip.addIncident(inc, 0);
  // expect the getContext of the Incident not to have been invoked as Clip
  // has its context loading
  expect(getContextLogs.length).toBe(0);
  myClip.play(true);
  myClip.playableProgress(0 / myClip.duration, 0);
  expect(Object.keys(myClip.blockingWaitings).length).toBe(1);
  expect(scratchValueLogs.length).toBe(0);
  const lane =
    myClip.realClip.instantiatedChannels[pluginNpm].LanesHandler.lanes;
  const firstItemId = lane[Object.keys(lane)[0]][0].id;
  expect(
    myClip.realClip.instantiatedChannels[pluginNpm].LanesHandler.incidentsById[
      firstItemId
    ].initialValue,
  ).toBe(0);

  myClip.realClip.contextLoaded();
  expect(
    myClip.realClip.instantiatedChannels[pluginNpm].LanesHandler.incidentsById[
      firstItemId
    ].initialValue,
  ).toBe(14);
  expect(Object.keys(myClip.blockingWaitings).length).toBe(0);
});
