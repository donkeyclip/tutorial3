import MediaPlayIncident from '../../RealIncidents/MediaPlayIncident';
import { loadPlugin, TimeCapsule as _TimeCapsule, Effect } from '../../main';
import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';

const description = 'Block description';

const TimeCapsule = new _TimeCapsule();

class MyAudioPlayback extends MediaPlayIncident {
  play() {
    // eslint-disable-line no-unused-vars
    this.setBlock('WebAudio-blocking-description');
  }
}

class MyExceptionalAudioPlayback extends MediaPlayIncident {
  play() {
    // eslint-disable-line no-unused-vars
    this.setBlock('WebAudio-blocking-description', { exceptional: true });
  }
}

let myClip;
let casi;

class MyPluginIncident extends Effect {
  onGetContext() {}

  onProgress() {
    // eslint@donkeyclip no-unused-vars
    if (this.isBlocked === true) {
      this.unblock();
    } else {
      this.setBlock(description);
    }
  }
}

const testPlugin = {
  npm_name: '@donkeyclip/test-plugin',
  name: 'Test Plugin',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
    },
    {
      exportable: MyExceptionalAudioPlayback,
      name: 'MEPInc',
    },
    {
      exportable: MyAudioPlayback,
      name: 'MPMediaPlayback',
    },
  ],
  audio: true,
};

const TestPlugin = loadPlugin(testPlugin);

test('set blocking waiting to Clip while playing. Expect to block', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
                <div id="casi-container"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
    audioSources: [
      {
        src: 'http://www.hochmuth.com/mp3/Tchaikovsky_Rococo_Var_orch.mp3',
        id: 'classic',
        classes: ['classic'],
        base64: false,
      },
    ],
  });

  const di1 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 1,
      },
    },
    {
      selector: '.my-class',
      duration: 1000,
      id: 'di1',
    },
  );

  myClip.addIncident(di1, 0);

  myClip.play(true);
  myClip.playableProgress(100 / myClip.duration, 100);

  expect(Object.keys(myClip.blockingWaitings).length).toBe(2);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[0]]
      .description,
  ).toBe(description);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[1]]
      .description,
  ).toBe(description);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[0]].incidentId,
  ).toBe('di1');
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[1]].incidentId,
  ).toBe('di1');
});

test('set blocking waiting to Clip from MonoIncident belonging to CASI', () => {
  casi = new DC({
    html: `
            <div id="my-root-div">
                <div id="di-container"></div>
            </div>`,
    css: '',
    selector: '#casi-container',
    id: 'casi',
  });

  const di2 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 1,
      },
    },
    {
      selector: '#di-container',
      duration: 1000,
      id: 'di2',
    },
  );

  casi.addIncident(di2, 1000);
  myClip.addIncident(casi, 0);

  myClip.stop();
  myClip.play(true);
  myClip.playableProgress(1100 / myClip.duration, 1100);

  expect(Object.keys(myClip.blockingWaitings).length).toBe(3);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[0]]
      .description,
  ).toBe(description);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[1]]
      .description,
  ).toBe(description);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[0]].incidentId,
  ).toBe('di1');
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[1]].incidentId,
  ).toBe('di1');
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[2]]
      .description,
  ).toBe(description);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[2]].incidentId,
  ).toBe('di2');
});

test('set blocking waiting to Clip from AudioPlayback belonging to CASI', () => {
  const myMPB = new TestPlugin.MPMediaPlayback(
    {},
    { id: 'media-playback', selector: '~#classic', duration: 2000 },
  );
  myClip.addIncident(myMPB, 2000);
  myClip.stop();
  myClip.play(true);
  myClip.playableProgress(2100 / myClip.duration, 2100);
  expect(Object.keys(myClip.blockingWaitings).length).toBe(2);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[1]].incidentId,
  ).toBe('media-playback');
});

test('transition Clip while on blocking state should remove all blocks', () => {
  myClip.stop();
  expect(Object.keys(myClip.blockingWaitings).length).toBe(0);
});

test('blocks while on transition should be ignored by Clip', () => {
  myClip.play(true);
  const journey = TimeCapsule.startJourney(myClip);
  journey.station(500);
  journey.station(1000);
  journey.station(1100);
  journey.station(1500);
  journey.station(2500);
  journey.destination();
  expect(Object.keys(myClip.blockingWaitings).length).toBe(0);
  expect(myClip.runTimeInfo.state).toBe('playing');
});

test('set block from _ClipCopy should block the Clip as normal', () => {
  const CAClipIncKey = Object.keys(
    myClip.realClip.children.casi.leaf.children,
  )[0];
  const cCopy =
    myClip.realClip.children.casi.leaf.children[CAClipIncKey].leaf.contexts[
      'my-clip'
    ];
  cCopy.setBlock();
  expect(Object.keys(myClip.blockingWaitings)).toEqual([cCopy.blockID]);
});

test('unblock from _ClipCopy', () => {
  const CAClipIncKey = Object.keys(
    myClip.realClip.children.casi.leaf.children,
  )[0];
  const cCopy =
    myClip.realClip.children.casi.leaf.children[CAClipIncKey].leaf.contexts[
      'my-clip'
    ];
  cCopy.unblock();
  expect(Object.keys(myClip.blockingWaitings).length).toBe(0);
});

test('exceptional blocking', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
                <div id="casi-container"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
    audioSources: [
      {
        src: 'http://www.hochmuth.com/mp3/Tchaikovsky_Rococo_Var_orch.mp3',
        id: 'classic',
        classes: ['classic'],
        base64: false,
      },
    ],
  });

  const meci = new TestPlugin.MEPInc(
    {
      animatedAttrs: {
        gamma: 1,
      },
    },
    {
      selector: '#element-1',
      duration: 1000,
      id: 'di2',
    },
  );

  myClip.addIncident(meci, 0);
  myClip.play(true);
  myClip.playableProgress(100 / myClip.duration, 100);
  expect(Object.keys(myClip.blockingWaitings).length).toBe(1);
  expect(
    myClip.blockingWaitings[Object.keys(myClip.blockingWaitings)[0]].options,
  ).toEqual({ exceptional: true });
});
