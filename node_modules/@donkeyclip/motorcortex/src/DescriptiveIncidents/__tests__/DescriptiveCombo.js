/* eslint-disable sonarjs/no-duplicate-string */
import * as MotorCortex from '../../main';
import { _MC_Attribute, _MC_Plugin_Name } from '../../_configuration/_CONST';
import DCb from '../DescriptiveCombo';
import DI from '../DescriptiveIncident';
const pkg = require('../../../package.json');
const version = pkg.version;

test('DCb.01 DescriptiveCombo do not accept new Incidents', () => {
  const dcb = new DCb(
    { incidents: [] },
    {
      selector: '.test',
    },
  );
  const res = dcb.addIncident({});
  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(1);
});

test('DCb.02 DescriptiveCombo do not accept move Incident', () => {
  const dcb = new DCb(
    { incidents: [] },
    {
      selector: '.test',
    },
  );
  const res = dcb.moveIncident({});
  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(1);
});

test('DCb.03 DescriptiveCombo do not accept remove Incident', () => {
  const dcb = new DCb(
    { incidents: [] },
    {
      selector: '.test',
    },
  );
  const res = dcb.removeIncident({});
  expect(res.errors.length).toBe(1);
  expect(res.result).toBe(false);
});

test('DCb.04 Invalid props on Combo initialisation', () => {
  const dcb = new DCb(
    { incidents: [] },
    {
      selector: '.test',
      hiatus: 'wrong',
    },
  );
  expect(dcb.result).toBe(false);
});

test('DCb.05 Invalid attrs (on top-level) on Combo initialisation', () => {
  const dcb = new DCb(
    { incidents: 'wrong' },
    {
      selector: '.test',
    },
  );
  expect(dcb.result).toBe(false);
});

test('DCb.06 Initialise a Combo with missing position on Incidents', () => {
  const dcb = new DCb(
    {
      incidents: [
        {
          incidentClass: DI,
          attrs: { alpha: 'alpha' },
          props: { beta: 'beta' },
        },
      ],
    },
    {
      selector: '.test',
    },
  );
  expect(dcb.result).toBe(false);
  expect(dcb.errors[0].message).toBe(
    "The 'incidents[0].position' field is required.",
  );
});

test('DCb.07 Initialise a Combo with Incidents and all of the supported props + dynamic values', () => {
  const dcb = new DCb(
    {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
            selector: '.test',
          },
          position: 0,
        },
        {
          incidentClass: DI,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
          },
          position: 1000,
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@stagger(100,200)',
                  beta: '@attribute(data-attr)',
                  gamma: '@expression(3+3)px',
                },
                props: {
                  repeats: '@stagger(0,2)',
                  hiatus: '@expression(2+3)',
                  delay: '@attribute(data-attr)',
                },
                position: 1000,
              },
            ],
          },
          props: {},
          position: 400,
        },
      ],
    },
    {
      selector: '.test',
      delay: '@stagger(0, 1000, 0.5)',
      hiatus: '@expression(total/3)',
    },
  );
  expect(dcb).toBeInstanceOf(DCb);
});

test('DC.08 Export definition', () => {
  class MyPluginIncident extends MotorCortex.Effect {
    onGetContext() {}

    // eslint-disable-next-line no-unused-vars
    onProgress(t) {}
  }

  const testPlugin = {
    npm_name: '@donkeyclip/test-plugin',
    incidents: [
      {
        exportable: MyPluginIncident,
        name: 'MPInc',
      },
    ],
  };

  const TestPlugin = MotorCortex.loadPlugin(testPlugin);

  const dcb = new DCb(
    {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
            selector: '.test',
          },
          position: 0,
        },
        {
          incidentClass: TestPlugin.MPInc,
          attrs: {
            alpha: 4,
          },
          props: {
            duration: 1200,
            selector: 'whatever',
          },
          position: 1000,
        },
        {
          incidentClass: DI,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
          },
          position: 1000,
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@stagger(100,200)',
                  beta: '@attribute(data-attr)',
                  gamma: '@expression(3+3)px',
                },
                props: {
                  repeats: '@stagger(0,2)',
                  hiatus: '@expression(2+3)',
                  delay: '@attribute(data-attr)',
                },
                position: 1000,
              },
            ],
          },
          props: {},
          position: 400,
        },
      ],
    },
    {
      selector: '.test',
      delay: '@stagger(0, 1000, 0.5)',
      hiatus: '@expression(total/3)',
    },
  );

  const exportt = dcb.exportDefinition();
  expect(exportt).toEqual({
    ClassName: 'Combo',
    plugin: _MC_Plugin_Name,
    version: version,
    plugin_npm_name: _MC_Plugin_Name,
    attrs: {
      incidents: [
        {
          ClassName: 'Incident',
          plugin_npm_name: _MC_Attribute,
          version: version,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
            selector: '.test',
          },
          position: 0,
        },
        {
          ClassName: 'MPInc',
          plugin_npm_name: '@donkeyclip/test-plugin',
          version: '*',
          attrs: {
            alpha: 4,
          },
          props: {
            duration: 1200,
            selector: 'whatever',
          },
          position: 1000,
        },
        {
          ClassName: 'Incident',
          plugin_npm_name: _MC_Attribute,
          version: version,
          attrs: {
            alpha: '@stagger(100,200)',
            beta: '@attribute(data-attr)',
            gamma: '@expression(3+3)px',
          },
          props: {
            repeats: '@stagger(0,2)',
            hiatus: '@expression(2+3)',
            delay: '@attribute(data-attr)',
          },
          position: 1000,
        },
        {
          ClassName: 'Combo',
          plugin_npm_name: _MC_Plugin_Name,
          version: version,
          attrs: {
            incidents: [
              {
                ClassName: 'Incident',
                plugin_npm_name: _MC_Attribute,
                version: version,
                attrs: {
                  alpha: '@stagger(100,200)',
                  beta: '@attribute(data-attr)',
                  gamma: '@expression(3+3)px',
                },
                props: {
                  repeats: '@stagger(0,2)',
                  hiatus: '@expression(2+3)',
                  delay: '@attribute(data-attr)',
                },
                position: 1000,
              },
            ],
          },
          props: {},
          position: 400,
        },
      ],
    },
    props: {
      selector: '.test',
      delay: '@stagger(0, 1000, 0.5)',
      hiatus: '@expression(total/3)',
    },
    incidents: {},
    duration: 'dynamic',
  });
});
