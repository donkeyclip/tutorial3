/** ***************** DESCRIPTIVE INCIDENT ******************* */
import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import DG from '../DescriptiveGroup';
import DI from '../DescriptiveIncident';

const groupSelector = '.groups-selector';

const nullSelectorIncident = new DI(
  {
    animatedAttrs: { alpha: 2 },
  },
  {
    duration: 1000,
    id: 'desc-inc--1',
  },
);

const relativeSelectorIncident = new DI(
  {
    animatedAttrs: {
      beta: 2,
    },
  },
  {
    selector: '&.my-class',
    duration: 3000,
    id: 'desc-inc-0',
  },
);

const plainSelectorIncident = new DI(
  {
    animatedAttrs: {
      beta: 2,
    },
  },
  {
    selector: '.my-class',
    duration: 3000,
    id: 'desc-inc-1',
  },
);

const plainSelectorIncident2 = new DI(
  {
    animatedAttrs: {
      beta: 2,
    },
  },
  {
    selector: '.my-class',
    duration: 3000,
    id: 'desc-inc-2',
  },
);

const DC1 = new DC({
  html: '<div></div>',
  css: '',
  selector: '.clip-container',
  id: 'DC1',
});

const noSelectorGroup = new DG({ id: 'no-selector-group' });
const selectorGroup = new DG({
  id: 'selector-group',
  selector: groupSelector,
});
const selectorGroup2 = new DG({
  id: 'selector-group-2',
  selector: '.groups-selector-2',
});
const selectorGroup3 = new DG({
  id: 'selector-group-3',
  selector: '.groups-selector-3',
});

test(`A Group takes no selector and an Incident with selector gets added to it.
    The final Incident’s selector will be identical to the Incident's`, () => {
  noSelectorGroup.addIncident(plainSelectorIncident, 0);
  expect(plainSelectorIncident.selector()).toBe('.my-class');
});

test(`A Group takes a selector and an Incident with plain selector gets added to it.
    The Incident’s final selector will be groupSelector incidentSelector`, () => {
  selectorGroup.addIncident(plainSelectorIncident2, 0);
  expect(plainSelectorIncident2.selector()).toBe('.groups-selector .my-class');
});

test(`An Incident that inherited a parent selector gets removed from its parent.
    Its selector should return to normal state, without its parent's selector`, () => {
  selectorGroup.removeIncident('desc-inc-2');
  expect(plainSelectorIncident2.selector()).toBe('.my-class');
});

test(`A Group takes a selector and an Incident with relative selector gets added to it.
    The Incident’s final selector will be “.groups-selector.my-class”`, () => {
  selectorGroup.addIncident(relativeSelectorIncident, 0);
  expect(relativeSelectorIncident.selector()).toBe('.groups-selector.my-class');
});

test(`A Group takes a selector and an Incident without selector gets added to it.
    The Incident’s final selector will be identical to its parent's`, () => {
  selectorGroup.addIncident(nullSelectorIncident, 5000);
  expect(nullSelectorIncident.selector()).toBe(groupSelector);
});

test(`A Group which already has Incidents attached to it gets added to another selector group.
    Both its own selector along with all of its Incidents' selectors should get affected`, () => {
  selectorGroup2.addIncident(selectorGroup, 0);
  expect(selectorGroup.selector()).toBe('.groups-selector-2 .groups-selector');
  expect(nullSelectorIncident.selector()).toBe(
    '.groups-selector-2 .groups-selector',
  );
  expect(relativeSelectorIncident.selector()).toBe(
    '.groups-selector-2 .groups-selector.my-class',
  );
});

test(`A Group which already has Incidents attached to it gets detatched from its parent Group that also
    has a selector.
    Both its own selector along with all of its Incidents' selectors should get affected`, () => {
  selectorGroup2.removeIncident('selector-group');
  expect(selectorGroup.selector()).toBe(groupSelector);
  expect(nullSelectorIncident.selector()).toBe(groupSelector);
  expect(relativeSelectorIncident.selector()).toBe('.groups-selector.my-class');
});

test(`A DescriptiveClip (DC1) enters a selector Group's timeline. The selector Group
    is already attached to another DescriptiveClip (DC0). DC1 already has Incidents attached to it.
    Adding DC1 to its parent Group should not affect its children selectors while its own should be affected`, () => {
  selectorGroup.removeIncident('desc-inc-0');
  selectorGroup.removeIncident('desc-inc--1');

  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');

  const DC0 = new DC({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'DC0',
  });

  DC0.addIncident(selectorGroup3, 0);

  DC1.addIncident(plainSelectorIncident2, 6000);

  selectorGroup3.addIncident(DC1, 0);

  expect(DC1.selector()).toBe('.groups-selector-3 .clip-container');
  expect(plainSelectorIncident2.selector()).toBe('.my-class');
});

test(`Removing a DC from its parent selector Group should affect its own selector
    but should not affect its children selectors`, () => {
  selectorGroup3.removeIncident('DC1');
  expect(DC1.selector()).toBe('.clip-container');
  expect(plainSelectorIncident2.selector()).toBe('.my-class');
});
