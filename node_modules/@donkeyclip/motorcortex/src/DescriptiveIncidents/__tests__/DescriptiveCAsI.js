import TesterClass from '../../../tester/Tester';
import NullClip from '../../Clip/Browser/Descriptive/helpers/NullClip';
import * as MotorCortex from '../../main';
import DC from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import DG from '../DescriptiveGroup';
import DI from '../DescriptiveIncident';
import { clipsLane, descriptiveTree, realTree } from './states/dcasi1';

const Tester = new TesterClass();

let myRootClip;
let myCAsI;
let myHostedClip;
let diInsideCasi;

const myGroup = new DG({ id: 'my-group' });

const rootClipId = 'my-root-clip';
const casiMyClassSelector = '.casi_my-class';
const testIncidentId = 'test-incident-1';
const testIncident2Id = 'test-incident-2';
const staggerTenThousand = '@stagger(100, 1000)';

test('CAsI1. Add a HTMLDescriptiveClip with an Incident to a hosted HTMLDescriptiveClip', () => {
  myRootClip = new DC({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.clip-container',
    id: rootClipId,
  });

  myCAsI = new DC({
    html: `
            <div id="my-root-div">
                <div id="casi_element-1" class="casi_my-class" data-motorcortex2-id="casi_my-class-1"></div>
                <div id="casi_element-2" class="casi_my-class" data-motorcortex2-id="casi_my-class-2"></div>
                <div class="dynamic"></div>
                <div class="dynamic"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.my-class',
    id: 'casi',
  });

  diInsideCasi = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 1.1,
        beta: 2.2,
      },
    },
    {
      selector: casiMyClassSelector,
      duration: 2000,
      id: testIncidentId,
    },
  );

  myGroup.addIncident(diInsideCasi, 1000);
  const res = myRootClip.addIncident(myCAsI, 500);
  expect(res.result).toEqual(true);

  myCAsI.addIncident(myGroup, 1000);

  const testRes = Tester.testTree(descriptiveTree, myRootClip);

  const clipLane =
    myRootClip.realClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ].incidents;
  const clipLanesTest = Tester.testClipLanes(clipsLane, clipLane);
  const realTreeTest = Tester.testTree(realTree, myRootClip.realClip);

  expect(testRes).toHaveNoErros();
  expect(clipLanesTest).toHaveNoErros();
  expect(realTreeTest).toHaveNoErros();
});

test('CAsI2. Add a two-levels CAsI into a hosted clip', () => {
  document.body.innerHTML = `
        <div id="my-root-clip"></div>
        <div id="my-copy-clip"></div>
    `;
  const host = document.getElementById(rootClipId);

  myHostedClip = new DC({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'my-hosted-clip',
  });

  const testIncident1_casi_myClass1 = 'test-incident-1_casi_my-class-1';
  const testIncident1_casi_myClass2 = 'test-incident-1_casi_my-class-2';

  const res = myHostedClip.addIncident(myRootClip, 0);
  expect(res.result).toBe(true);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncidentId].leaf
        .children[testIncident1_casi_myClass1].leaf.children[
        'test-incident-1_casi_my-class-1_alpha'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncidentId].leaf
        .children[testIncident1_casi_myClass2].leaf.children[
        'test-incident-1_casi_my-class-2_alpha'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncidentId].leaf
        .children[testIncident1_casi_myClass1].leaf.children[
        'test-incident-1_casi_my-class-1_beta'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncidentId].leaf
        .children[testIncident1_casi_myClass2].leaf.children[
        'test-incident-1_casi_my-class-2_beta'
      ].leaf.contexts,
    ).length,
  ).toBe(5);

  const liveDefinition = myHostedClip.exportLiveDefinition();
  liveDefinition.props.host = document.getElementById('my-copy-clip');
  const ClipFromDef = MotorCortex.utils.clipFromDefinition(liveDefinition);
  expect(
    Object.keys(
      ClipFromDef.children[rootClipId].leaf.children.casi.leaf.realClip
        .children['my-group'].leaf.children[testIncidentId].leaf.children[
        testIncident1_casi_myClass1
      ].leaf.children['test-incident-1_casi_my-class-1_alpha'].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children[rootClipId].leaf.children.casi.leaf.realClip
        .children['my-group'].leaf.children[testIncidentId].leaf.children[
        testIncident1_casi_myClass2
      ].leaf.children['test-incident-1_casi_my-class-2_alpha'].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children[rootClipId].leaf.children.casi.leaf.realClip
        .children['my-group'].leaf.children[testIncidentId].leaf.children[
        testIncident1_casi_myClass1
      ].leaf.children['test-incident-1_casi_my-class-1_beta'].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      ClipFromDef.children[rootClipId].leaf.children.casi.leaf.realClip
        .children['my-group'].leaf.children[testIncidentId].leaf.children[
        testIncident1_casi_myClass2
      ].leaf.children['test-incident-1_casi_my-class-2_beta'].leaf.contexts,
    ).length,
  ).toBe(5);
});

test('CAsI3. Add an Incident to an existing multi-level tree', () => {
  const di = new DI(
    {
      attribute: 'value',
      animatedAttrs: {
        alpha: 5,
        beta: 6,
      },
    },
    {
      selector: casiMyClassSelector,
      duration: 2000,
      id: testIncident2Id,
    },
  );

  const res = myGroup.addIncident(di, 6000);

  expect(res.result).toBe(true);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncident2Id].leaf
        .children['test-incident-2_casi_my-class-1'].leaf.children[
        'test-incident-2_casi_my-class-1_alpha'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncident2Id].leaf
        .children['test-incident-2_casi_my-class-2'].leaf.children[
        'test-incident-2_casi_my-class-2_alpha'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncident2Id].leaf
        .children['test-incident-2_casi_my-class-1'].leaf.children[
        'test-incident-2_casi_my-class-1_beta'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
  expect(
    Object.keys(
      myCAsI.realClip.children['my-group'].leaf.children[testIncident2Id].leaf
        .children['test-incident-2_casi_my-class-2'].leaf.children[
        'test-incident-2_casi_my-class-2_beta'
      ].leaf.contexts,
    ).length,
  ).toBe(5);
});

test('CAsI4. Edit the position of a CAsI', () => {
  const res = myHostedClip.moveIncident(rootClipId, 1000);
  expect(res.result).toBe(true);
});

test(`CAsI5. Edit the properties of an Incident inside a CAsI`, () => {
  const res = diInsideCasi.editProperties({
    selector: casiMyClassSelector,
    duration: 1000,
    id: testIncidentId,
    repeats: 2,
  });
  expect(res.result).toBe(true);

  // second change
  const res2 = diInsideCasi.editProperties({
    selector: casiMyClassSelector,
    duration: 3000,
    id: testIncidentId,
    repeats: 1,
  });
  expect(res2.result).toBe(true);
});

test('CAsI6. Adding a dynamic-duration Incident to CAsI should set the duration to a real number', () => {
  const myCAsI2 = new DC({
    html: `
            <div id="my-root-div">
                <div id="casi_element-1" class="casi_my-class" data-motorcortex2-id="casi_my-class-1"></div>
                <div id="casi_element-2" class="casi_my-class" data-motorcortex2-id="casi_my-class-2"></div>
                <div class="dynamic"></div>
                <div class="dynamic"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.my-class',
    id: 'casi',
  });

  const di = new DI(
    {
      animatedAttrs: { a: 1 },
    },
    {
      duration: staggerTenThousand,
      selector: '.dynamic',
    },
  );

  const dg4 = new DG();
  const dg3 = new DG();

  dg4.addIncident(dg3, 1000);
  expect(dg4.duration).toBe(1000);

  myCAsI2.addIncident(dg4, 1000);

  dg3.addIncident(di, 1000);
  expect(di.duration).toBe(1000);
  expect(dg3.duration).toBe(2000);
  expect(dg4.duration).toBe(3000);
  expect(myCAsI2.duration).toBe(4000);
});

test('CAsI7. Removing a Group with dynamic-duration Incidents from a CAsI should reset the duration to dynamic', () => {
  const myCAsI2 = new DC({
    html: `
            <div id="my-root-div">
                <div id="casi_element-1" class="casi_my-class" data-motorcortex2-id="casi_my-class-1"></div>
                <div id="casi_element-2" class="casi_my-class" data-motorcortex2-id="casi_my-class-2"></div>
                <div class="dynamic"></div>
                <div class="dynamic"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    selector: '.my-class',
    id: 'casi',
  });

  const di = new DI(
    {
      animatedAttrs: { a: 1 },
    },
    {
      duration: staggerTenThousand,
      selector: '.dynamic',
    },
  );

  const dg4 = new DG({ id: 'dg4' });
  const dg3 = new DG({ id: 'dg3' });

  dg4.addIncident(dg3, 1000);
  expect(dg4.duration).toBe(1000);
  myCAsI2.addIncident(dg4, 1000);
  dg3.addIncident(di, 1000);

  myCAsI2.removeIncident(dg4);

  expect(di.duration).toBe('dynamic');
  expect(dg3.duration).toBe('dynamic');
  expect(dg4.duration).toBe('dynamic');
  expect(myCAsI2.duration).toBe(0);

  // and putting it back to CAsI should turn the durations back to numbers
  myCAsI2.addIncident(dg4, 1000);
  expect(di.duration).toBe(1000);
  expect(dg3.duration).toBe(2000);
  expect(dg4.duration).toBe(3000);
  expect(myCAsI2.duration).toBe(4000);
});

test('CAsI8. Set CAsI nane', () => {
  const di = new DI(
    {
      animatedAttrs: { a: 1 },
    },
    {
      duration: staggerTenThousand,
      selector: '.dynamic',
    },
  );

  di.name = 'test';
  expect(di.name).toBe('test');
});

test(`CAsI9. Test that a CAsI containing expressions either on attrs or props creates
a NullClip as its realClip`, () => {
  const dc = new DC(
    {
      a: '@expression(initParams.x)',
    },
    {
      duration: 1000,
      selector: '.test',
    },
  );
  expect(dc.realClip).toBeInstanceOf(NullClip);

  const dc2 = new DC(
    {
      a: 'test',
    },
    {
      duration: '@expression(initParams.x)',
      selector: '.test',
    },
  );
  expect(dc2.realClip).toBeInstanceOf(NullClip);
});
