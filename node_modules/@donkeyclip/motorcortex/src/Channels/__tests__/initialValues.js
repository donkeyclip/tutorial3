import TesterClass from '../../../tester/Tester';
import { Effect, HTMLClip, loadPlugin } from '../../main';
import { lanes as lanes1 } from './states/iv_state1';
import { lanes as lanes10 } from './states/iv_state10';
import { lanes as lanes11 } from './states/iv_state11';
import { lanes as lanes12 } from './states/iv_state12';
import { lanes as lanes2 } from './states/iv_state2';
import { lanes as lanes3 } from './states/iv_state3';
import { lanes as lanes4 } from './states/iv_state4';
import { lanes as lanes5 } from './states/iv_state5';
import { lanes as lanes6 } from './states/iv_state6';
import { lanes as lanes7 } from './states/iv_state7';
import { lanes as lanes8 } from './states/iv_state8';
import { lanes as lanes8a } from './states/iv_state8a';
import { lanes as lanes9 } from './states/iv_state9';

let myClip;

const Tester = new TesterClass();

/** ************************* PLUGIN DEFINITION ************************ */
/** ******************************************************************* */
class MyPluginIncident extends Effect {
  onGetContext() {}

  onProgress(fraction) {
    // eslint-disable-line no-unused-vars
    const { initialValue } = this;
    const { targetValue } = this;
    const value = initialValue + (targetValue - initialValue) * fraction;

    this.element.setAttribute(this.attributeKey, value);
  }

  getScratchValue() {
    // eslint-disable-line no-unused-vars
    if (this.attributeKey === 'alpha') {
      return 1;
    }
    if (this.attributeKey === 'beta') {
      return 2.5;
    }
    if (this.attributeKey === 'compo') {
      return {
        gamma: 3,
        delta: 4,
        epsilon: 5,
      };
    }

    return 0;
  }
}

const plugin_name = '@donkeyclip/test-plugin-0';
const element1_selector = '#element-1';
/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin0 = {
  npm_name: plugin_name,
  name: 'Test Plugin 0',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
    },
  ],
  compositeAttributes: {
    compo: ['gamma', 'delta', 'epsilon'],
  },
};

const TestPlugin = loadPlugin(testPlugin0);

/** ****************************** INCIDENTS ************************** */
/** ******************************************************************* */
let incident1;
let cincident1;
let incident2;
let cincident2;
let incident3;
let cincident3;
let incident4;
let cincident4;

test('IV1. Check Incident with initial values on some of its plain attributes', () => {
  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new HTMLClip({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  incident1 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 2,
        beta: 2,
      },
      initialValues: {
        alpha: 3,
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'incident1',
    },
  );

  const res = myClip.addIncident(incident1, 3000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes1, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV2. Check Incident with initial values on some keys of a combo attribute', () => {
  cincident1 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        compo: {
          gamma: 7,
          delta: 8,
        },
      },
      initialValues: {
        compo: {
          gamma: 0,
          epsilon: 1,
        },
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'cincident1',
    },
  );

  const res = myClip.addIncident(cincident1, 3000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes2, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV3. check adding an Incident before an Incident with initialValues (plain)', () => {
  incident2 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 20,
        beta: 20,
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'incident2',
    },
  );

  const res = myClip.addIncident(incident2, 2000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes3, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV4. check adding an Incident before an Incident with initialValues (combo)', () => {
  cincident2 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        compo: {
          gamma: 10,
          delta: 11,
          epsilon: 12,
        },
      },
      initialValues: {
        compo: {
          delta: 9,
          epsilon: 10,
        },
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'cincident2',
    },
  );

  const res = myClip.addIncident(cincident2, 2000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes4, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV5. Check deleting an Incident with no initial values, being on zero index and followed by Incident with initial values (plain attributes)', () => {
  const res = myClip.removeIncident(incident2);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes5, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV6. Check deleting an Incident with initial values being on zero index and followed by Incident with initial values (combo attributes)', () => {
  const res = myClip.removeIncident(cincident2);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes6, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV7. Check moving an Incident with no initial values to the zero index, before an Incident with initial values (plain attributes)', () => {
  const res0 = myClip.addIncident(incident2, 4000);
  expect(res0.result).toBe(true);

  const res = myClip.moveIncident(incident2, 1000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes7, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV8. Check moving an Incident with no initial values to the zero index, before an Incident with initial values (combo attributes)', () => {
  const res0 = myClip.addIncident(cincident2, 4000);
  expect(res0.result).toBe(true);

  const lha = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTesta = Tester.testLanes(lanes8a, lha.lanes, lha.incidentsById);
  expect(lanesTesta).toHaveNoErros();

  const res = myClip.moveIncident(cincident2, 1000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes8, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV9. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (plain attributes)', () => {
  incident3 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 30,
        beta: 30,
      },
      initialValues: {
        beta: 15,
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'incident3',
    },
  );

  const res0 = myClip.addIncident(incident3, 5000);
  expect(res0.result).toBe(true);

  const res = myClip.moveIncident(incident2, 4000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes9, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV10. Check moving an Incident followed by Incident with initial values from 0 index to the middle of the lane (combo attributes)', () => {
  cincident3 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        compo: {
          gamma: 30,
        },
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'cincident3',
    },
  );

  const res0 = myClip.addIncident(cincident3, 5000);
  expect(res0.result).toBe(true);

  const res = myClip.moveIncident(cincident2, 4000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes10, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('IV12. Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (plain attributes)', () => {
  incident4 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        alpha: 40,
        beta: 40,
      },
      initialValues: {
        alpha: 39,
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'incident4',
    },
  );

  const res0 = myClip.addIncident(incident4, 0);
  expect(res0.result).toBe(true);

  const res = myClip.moveIncident(incident2, 1000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes11, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});

test('Check moving an Incident of a lane of 4 Incidents from index 2 to index 1  (combo attributes)', () => {
  cincident4 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        compo: {
          gamma: 40,
        },
      },
      initialValues: {
        compo: {
          epsilon: 39,
        },
      },
    },
    {
      selector: element1_selector,
      duration: 1000,
      id: 'cincident4',
    },
  );

  const res0 = myClip.addIncident(cincident4, 0);
  expect(res0.result).toBe(true);

  const res = myClip.moveIncident(cincident2, 1000);
  expect(res.result).toBe(true);

  const lh = myClip.realClip.instantiatedChannels[plugin_name].LanesHandler;
  const lanesTest = Tester.testLanes(lanes12, lh.lanes, lh.incidentsById);
  expect(lanesTest).toHaveNoErros();
});
