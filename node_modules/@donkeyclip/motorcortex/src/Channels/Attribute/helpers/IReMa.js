/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { _FWDS } from './_CONST';

export default class IReMa {
  constructor() {
    /**
     * An object with numeric keys that keep the executionSubscribers per given iteration ms as array
     * In other words whichever lane has subscribed to a given period (e.g. from 100 to 200 on
     * the key 1 of our object) will be called if the target millisecond of the move is
     * within this area.
     * This object is stored per contextid
     * @type {{}}
     */
    this._executionSubscribers = {};
    this._bwExecutionSubscribers = {};

    /**
     * The interval (period) of milliseconds that we want to keep our Incident subscribers
     * @type {number}
     */
    this.subPeriod = 10;

    /**
     * The current period the execution is in (e.g. "0" or "100")
     * @type {number}
     */
    this._currentPeriod = {};

    this._nextIterationLanes = {};
  }

  reset() {
    this._executionSubscribers = {};
    this._bwExecutionSubscribers = {};
    this._nextIterationLanes = {};
  }

  executionSubscribers(contextid, direction) {
    const toReturn =
      direction === _FWDS
        ? this._executionSubscribers
        : this._bwExecutionSubscribers;
    toReturn[contextid] ??= {};
    return toReturn[contextid];
  }

  subscribe(contextid, direction, step, laneid, lane) {
    const subs = this.executionSubscribers(contextid, direction);
    subs[step] ??= {};
    subs[step][laneid] = () => {
      this._nextIterationLanes[contextid] ??= {};
      this._nextIterationLanes[contextid][laneid] = lane;
    };
  }

  nextIterationLanes(contextid, lanes) {
    this._nextIterationLanes[contextid] ??= { ...lanes };
    return this._nextIterationLanes[contextid];
  }

  setNextIterationLanes(contextid, lanes) {
    this._nextIterationLanes[contextid] = lanes;
  }

  currentPeriod(contextid) {
    this._currentPeriod[contextid] ??= 0;
    return this._currentPeriod[contextid];
  }

  setCurrentPeriod(contextid, period) {
    this._currentPeriod[contextid] = period;
  }
}
