import { BrowserClip, loadPlugin } from '../../main';

/** ************************* PLUGIN DEFINITION ************************ */
/** ******************************************************************* */
class MyPluginClip extends BrowserClip {
  onAfterRender() {
    this.setCustomEntity('myEntity', { alpha: 1, beta: 2 }, [
      'class1',
      'class2',
    ]);
    this.setCustomEntity('myEntity', { alpha: 1, beta: 2 }, [
      'class1',
      'class2',
    ]);
    this.setCustomEntity('myEntity2', { alpha: 2, beta: 3 }, [
      'class1',
      'class2',
    ]);
  }
}

/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin0 = {
  npm_name: '@donkeyclip/test-plugin-0',
  name: 'Test Plugin 0',
  Clip: { exportable: MyPluginClip },
};

const MyTestPlugin = loadPlugin(testPlugin0);
let myHostedClip;

test('CE1. Test custom entities set and getElements select', () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');

  myHostedClip = new MyTestPlugin.Clip({
    html: `<div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-1"></div>
            <div class="clip-container" data-motorcortex2-id="myRootClip-2"></div>
        </div>`,
    css: '',
    host,
    id: 'my-hosted-clip',
  });

  expect(myHostedClip.realClip.context.getElements('!#myEntity')).toEqual([
    {
      id: 'myEntity',
      entity: { alpha: 1, beta: 2 },
      classes: ['class1', 'class2'],
      customEntity: true,
    },
  ]);

  expect(myHostedClip.realClip.context.getElements('!.class1')).toEqual([
    {
      id: 'myEntity',
      entity: { alpha: 1, beta: 2 },
      classes: ['class1', 'class2'],
      customEntity: true,
    },
    {
      id: 'myEntity2',
      entity: { alpha: 2, beta: 3 },
      classes: ['class1', 'class2'],
      customEntity: true,
    },
  ]);
});

test('CE2. Test getMCID of custom Entities', () => {
  expect(
    myHostedClip.realClip.context.getMCID({
      id: 'myEntity',
      entity: { alpha: 1, beta: 2 },
      classes: ['class1', 'class2'],
      customEntity: true,
    }),
  ).toBe('myEntity');
});

test("CE3. Get custom entitie's selector", () => {
  expect(
    myHostedClip.realClip.context.getElementSelectorByMCID('myEntity'),
  ).toBe('!#myEntity');
});
