/* eslint-disable sonarjs/no-duplicate-string */
import HTMLDescriptiveClip from '../Browser/Descriptive/HTMLDescriptiveClip';
import { HTMLClip } from '../../main';

test('CPT.1 Test a valid Clip instantiation with all possible props passed', () => {
  const MyClip = new HTMLClip({
    html: '',
    css: '',
    fonts: [
      {
        type: 'google-font',
        src: 'https://a-url.com',
      },
    ],
    selector: 'a-selector',
    containerParams: {
      width: '300px',
      height: '300px',
    },
    easing: 'linear',
  });

  expect(MyClip).toBeInstanceOf(HTMLDescriptiveClip);
});

test('CPT.2 Test a valid Clip hosted instantiation with all possible props passed', () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');

  const MyClip = new HTMLClip({
    html: '',
    css: '',
    fonts: [
      {
        type: 'google-font',
        src: 'https://a-url.com',
      },
    ],
    host,
    containerParams: {
      width: '300px',
      height: '300px',
    },
  });

  expect(MyClip).toBeInstanceOf(HTMLDescriptiveClip);
});

test('CPT.3 Test a valid Clip instantiation with all possible props passed and with custom easing', () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';

  const MyClip = new HTMLClip({
    html: '',
    css: '',
    fonts: [
      {
        type: 'google-font',
        src: 'https://a-url.com',
      },
    ],
    selector: 'a-selector',
    containerParams: {
      width: '300px',
      height: '300px',
    },
    repeats: 2,
    hiatus: 1000,
    delay: 1000,
    easing: [1, 2, 3.5, 4],
  });

  expect(MyClip).toBeInstanceOf(HTMLDescriptiveClip);
});

test(`CPT.4 Test that repeats, hiatus and delay don't apply on hosted clips`, () => {
  document.body.innerHTML = '<div id="my-root-clip"></div>';
  const host = document.getElementById('my-root-clip');

  const MyClip = new HTMLClip({
    html: '',
    css: '',
    fonts: [
      {
        type: 'google-font',
        src: 'https://a-url.com',
      },
    ],
    host,
    repeats: 2,
    hiatus: 1000,
    delay: 1000,
    containerParams: {
      width: '300px',
      height: '300px',
    },
  });

  expect(MyClip.result).toBe(false);
  expect(MyClip.errors.length).toBe(6);
});
