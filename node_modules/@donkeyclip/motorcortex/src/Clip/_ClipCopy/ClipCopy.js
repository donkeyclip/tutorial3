/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import MonoIncident from '../../RealIncidents/MonoIncident'; // this is identical to MotorCortex.Effect
import { getElementByMCID } from '../../_coreUtils/helper';

class ClipCopy extends MonoIncident {
  constructor(attrs, props, dna) {
    super(attrs, props, dna);

    this.runTimeInfo = {
      currentMillisecond: 0,
    };
  }

  get duration() {
    return this.DescriptiveIncident.realClip.duration;
  }

  lastWish() {
    if (this.ownClip) {
      this.ownClip.context.unmount();
    }
  }

  onGetContext() {
    // In order to render itself on the given element first it needs the props (including html and css)
    // from the real Clip it copies
    const constructionArgs =
      this.DescriptiveIncident.realClip.exportConstructionArguments();
    // it properly sets its own host on the props to use to initialise its own clip
    const host = getElementByMCID(this.context, this.mcid);
    const hostedProps = {
      ...constructionArgs.props,
      selector: undefined,
      host,
      containerParams: this.DescriptiveIncident.props.containerParams || {},
      originalDims: this.DescriptiveIncident.constructor.originalDims || {},
    };

    // we create a clip because Clips on creation render and thus have their own context
    // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip
    // Class. No audio is involved on this process
    this.ownClip = new this.DescriptiveIncident.constructor.Incident(
      constructionArgs.attrs,
      hostedProps,
      this.DescriptiveIncident,
    );
    this.ownClip.clipCopyId = this.id;

    // flushes the realClip with its ownClip's context
    this.DescriptiveIncident.realClip.addContext(
      {
        clipId: this.id,
        context: this.ownClip.context,
      },
      true,
    );
    // even though we have created an own clip, we have made no checks at all neither
    // we added the incidents of the real clip to it. That is because playing and moving
    // this clip copy means directly moving the real clip on the context of the own clip.
    // So the only thing we need here is the context and nothing more.
  }

  onProgress(fraction, milliseconds, forceReset = false) {
    // if the context of the Original Clip is still loading block
    if (this.ownClip.ownContext.contextLoaded === false) {
      this.setBlock('context loading', { blockId: this.id });
      return;
    }
    for (const key in this.DescriptiveIncident.realClip.instantiatedChannels) {
      // it commands the Channels, of its Clip to move to the given progress point
      const channel =
        this.DescriptiveIncident.realClip.instantiatedChannels[key];
      channel.moveTo(
        this.runTimeInfo.currentMillisecond,
        milliseconds,
        this.id,
        forceReset,
      );
    }
    this.runTimeInfo.currentMillisecond = milliseconds;
  }
}

export default ClipCopy;
