/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { getAnId } from '../../../../_coreUtils/helper';

/*
dna: {
    host
    descriptiveIncident
}
*/
class ClipClone {
  constructor(dna) {
    this.runTimeInfo = {
      currentMillisecond: 0,
      state: 'transitional',
    };

    this.id = getAnId();
    this.realClip = dna.descriptiveIncident.realClip;
    // In order to render itself on the given element first it needs the props (including html and css)
    // from the real Clip it copies
    const constructionArgs =
      dna.descriptiveIncident.realClip.exportConstructionArguments();
    // it properly sets its own host on the props to use to initialise its own clip
    const hostedProps = {
      ...constructionArgs.props,
      selector: undefined,
      host: dna.host,
      id: this.id,
    };
    // we create a clip because Clips on creation render and thus have their own context
    this.ownClip = new dna.descriptiveIncident.constructor.Incident(
      constructionArgs.attrs,
      hostedProps,
    );

    // flushes the realClip with its ownClip's context
    dna.descriptiveIncident.realClip.addContext(
      {
        clipId: this.id,
        context: this.ownClip.context,
        synchronize: dna.synchronize,
        runTimeInfo: this.runTimeInfo,
      },
      true,
    );
  }

  // eslint-disable-next-line no-unused-vars
  onProgress(fraction, milliseconds, forceReset = false) {
    for (const key in this.realClip.instantiatedChannels) {
      const channel = this.realClip.instantiatedChannels[key];
      channel.moveTo(
        this.runTimeInfo.currentMillisecond,
        milliseconds,
        this.id,
        true,
      );
    }
    this.runTimeInfo.currentMillisecond = milliseconds;
  }
}

export default ClipClone;
