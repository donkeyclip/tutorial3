/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { elementsDataAttributeName } from '../../../_configuration/generalConf';
import ExtendableContextHandler from '../../_kit/ExtendableContextHandler';
import helper, {
  analyseContainerParams,
  hasOwnProp,
} from '../../../_coreUtils/helper';

export default class DOMContextHandler extends ExtendableContextHandler {
  /**
   * Depending on the containerParams and the originalDims status this method
   * decides which width and height values should be used for setting the dimensions
   * of the Clip (and if there should be dimensions set on the Clip)
   */
  calcClipDims(props) {
    // dims initialisation
    let dims = {
      use: false, // don't even set dimensions for the Clip
      width: null,
      height: null,
    };
    // if there are originalDims we certainly prefer them
    if (
      hasOwnProp(props, 'originalDims') &&
      props.originalDims.width != null &&
      props.originalDims.height != null
    ) {
      return {
        use: true,
        width: props.originalDims.width.number + props.originalDims.width.unit,
        height:
          props.originalDims.height.number + props.originalDims.height.unit,
      };
    }

    if (hasOwnProp(props, 'containerParams')) {
      if (hasOwnProp(props.containerParams, 'width')) {
        dims.use = true;
        dims.width = props.containerParams.width;
      }
      if (hasOwnProp(props.containerParams, 'height')) {
        dims.use = true;
        dims.height = props.containerParams.height;
      }
    }

    return dims;
  }

  /**
   * returns and object with keys: width, height
   * each of these keys define the scaling that should be applied to both dimensions of the Clip
   **/
  scalingCalculator(props) {
    // first decide IF a scaling should be applied:
    // Firstly, both "containerParams" and "originalDims" should be present and
    // should both contain meaningful data
    if (
      !hasOwnProp(props, 'containerParams') ||
      !hasOwnProp(props, 'originalDims') ||
      // Skip if the originalDims contain null values
      (props.originalDims.width == null && props.originalDims.height == null)
    ) {
      return {
        width: 1,
        height: 1,
      };
    }

    // The next thing to analyse the container params into number & units
    const analysedContainerParams = analyseContainerParams(
      props.containerParams,
    );

    // identify the scaling factors per each axis
    let widthScale = null,
      heightScale = null;
    if (
      analysedContainerParams.width !== null &&
      props.originalDims.width !== null
    ) {
      if (
        analysedContainerParams.width.unit === props.originalDims.width.unit
      ) {
        widthScale =
          analysedContainerParams.width.number /
          props.originalDims.width.number;
      } else {
        helper.warning(
          `containerParams and originalDims width of Incident have different dimensions.\ncontainerParams.width will be ignored`,
        );
      }
    }

    if (
      analysedContainerParams.height != null &&
      props.originalDims.height != null
    ) {
      if (
        analysedContainerParams.height.unit === props.originalDims.height.unit
      ) {
        heightScale =
          analysedContainerParams.height.number /
          props.originalDims.height.number;
      } else {
        helper.warning(
          'containerParams and originalDims height of Incident have different dimensions.\ncontainerParams.height will be ignored',
        );
      }
    }

    if (widthScale == null && heightScale == null) {
      return {
        width: 1,
        height: 1,
      };
    }

    if (widthScale != null && heightScale == null) {
      heightScale = widthScale;
    } else if (heightScale != null && widthScale == null) {
      widthScale = heightScale;
    }

    return {
      width: widthScale,
      height: heightScale,
    };
  }

  getElements(selector) {
    return Array.from(this.context.rootElement.querySelectorAll(selector));
  }

  getMCID(element) {
    return element.getAttribute(elementsDataAttributeName);
  }

  setMCID(element, mcid) {
    element.setAttribute(elementsDataAttributeName, mcid);
  }

  getElementSelectorByMCID(mcid) {
    return `[${elementsDataAttributeName}="${mcid}"]`;
  }
}
