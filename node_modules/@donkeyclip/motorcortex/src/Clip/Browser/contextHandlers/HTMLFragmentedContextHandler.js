/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import WebComponentContextHandler from './WebComponentContextHandler';
import helper, { hasOwnProp, isObject } from '../../../_coreUtils/helper';

class HTMLFragmentedContextHandler extends WebComponentContextHandler {
  constructor(props = {}) {
    super(props);
    this.context.fragment = true; // this context property lets the developer know at any time if the context is on
    // fragmented state or not
    this.rendered = false;
    this.removeDOMTimeout = null;
  }

  get targetHost() {
    if (!this._targetHost) {
      this._targetHost = document.createElement('div');
      this._targetHost.style.zIndex = '-1';
      this._targetHost.style.width = '0px';
      this._targetHost.style.height = '0px';
      this._targetHost.style.overflow = 'hidden';
      this._targetHost.style.position = 'relative';
    }
    return this._targetHost;
  }

  checkProps() {
    if (!isObject(this.props)) {
      helper.error(
        `HTMLFragmentContextHandler expects an object on its constructor. ${typeof this
          .props} passed`,
      );
      return false;
    }

    if (!hasOwnProp(this.props, 'html')) {
      this.props.html = '';
    }

    if (!hasOwnProp(this.props, 'css')) {
      this.props.css = '';
    }
    return true;
  }

  renderOnDOM() {
    if (this.removeDOMTimeout) {
      clearTimeout(this.removeDOMTimeout);
    }
    if (!this.rendered) {
      document.body.append(this._targetHost);
      this.rendered = true;
    }
  }

  removeFromDOM() {
    if (this.removeDOMTimeout) {
      clearTimeout(this.removeDOMTimeout);
    }
    this.removeDOMTimeout = setTimeout(() => {
      try {
        document.body.removeChild(this._targetHost);
        this.rendered = false;
      } catch (e) {
        helper.info(
          `Clip's DOM element was not found and thus not removed from DOM`,
        );
      }
    }, 50);
  }
}

export default HTMLFragmentedContextHandler;
