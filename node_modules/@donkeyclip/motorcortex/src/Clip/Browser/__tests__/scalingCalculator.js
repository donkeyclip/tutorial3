import ContextHanlder from '../contextHandlers/DOMContextHandler';

const CH = new ContextHanlder();

/**
 * Tests of the DOMContextHandler scalingCalculator method.
 * This method takes as input a props object which has two keys on it:
 *  - containerParams
 *  - originalDims
 * Original dims are an analysed object, with format:
 * {
 *  width: {number: <N>, unit: <U>},
 *  height: {number: <N>, unit: <U>}
 * }
 * while containerParams is an object on the form:
 * {
 *  width: "1000px",
 *  height: "5%"
 * }
 **/

test(`SC.01 originalDims present but no containerParams`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 500, unit: 'px' },
  };
  const containerParams = null;
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '500px',
  });
});
test(`SC.02 containerParams present but no originalDims present`, () => {
  const originalDims = {
    width: null,
    height: null,
  };
  const containerParams = {
    width: '1000px',
    height: '500px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '500px',
  });
});
test(`SC.03 containerParams.width present, originalDims.width present, no height, different units though`, () => {
  const originalDims = {
    width: { number: 10, unit: '%' },
    height: null,
  };
  const containerParams = {
    width: '1000px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: null,
  });
});
test(`SC.04 containerParams.height present, originalDims.height present, no width, different units though`, () => {
  const originalDims = {
    width: null,
    height: { number: 10, unit: '%' },
  };
  const containerParams = {
    height: '1000px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    height: '1000px',
    width: null,
  });
});
test(`SC.05 both dims present on both objects, different units on width`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 10, unit: '%' },
  };
  const containerParams = {
    width: '100%',
    height: '5%',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 0.5,
    height: 0.5,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '10%',
  });
});
test(`SC.06 both dims present on both objects, different units on height`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 10, unit: '%' },
  };
  const containerParams = {
    width: '2000px',
    height: '5px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 2,
    height: 2,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '10%',
  });
});
test(`SC.07 both dims present on both objects, different units on both`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 10, unit: '%' },
  };
  const containerParams = {
    width: '2000%',
    height: '5px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '10%',
  });
});
test(`SC.08 width only present on originalDims, height only present of containerParams`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: null,
  };
  const containerParams = {
    height: '5px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: null,
    height: '5px',
  });
});
test(`SC.09 height only present on originalDims, width only present of containerParams`, () => {
  const originalDims = {
    width: null,
    height: { number: 1000, unit: 'px' },
  };
  const containerParams = {
    width: '5px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 1,
    height: 1,
  });
});
test(`SC.10 both dims present on originalDims, height only present of containerParams`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 500, unit: 'px' },
  };
  const containerParams = {
    height: '1000px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 2,
    height: 2,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '500px',
  });
});
test(`SC.11 both dims present on originalDims, height only present of containerParams`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 500, unit: 'px' },
  };
  const containerParams = {
    width: '500px',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 0.5,
    height: 0.5,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '500px',
  });
});
test(`SC.12 both dims present on both objects, same units`, () => {
  const originalDims = {
    width: { number: 1000, unit: 'px' },
    height: { number: 100, unit: '%' },
  };
  const containerParams = {
    width: '500px',
    height: '200%',
  };
  const props = {
    originalDims,
    containerParams,
  };
  expect(CH.scalingCalculator(props)).toEqual({
    width: 0.5,
    height: 2,
  });
  expect(CH.calcClipDims(props)).toEqual({
    use: true,
    width: '1000px',
    height: '100%',
  });
});
