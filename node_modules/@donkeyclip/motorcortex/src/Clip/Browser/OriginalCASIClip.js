/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import ExtendableClip from '../_kit/ExtendableClip';
import HTMLFragmentedContextHandler from './contextHandlers/HTMLFragmentedContextHandler';
import { hasOwnProp } from '../../_coreUtils/helper';

class OriginalCASIClip extends ExtendableClip {
  constructor(props = {}, oldProps = null, DescriptiveIncident) {
    let attrsToPass;
    let propsToUse;
    /*
        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is
        the new way of initialising a Group (only props).
        */
    if (oldProps === null) {
      attrsToPass = {};
      propsToUse = props;
    } else {
      // else, in case the user has passed two arguments then both should be used
      attrsToPass = props;
      propsToUse = oldProps;
    }

    super(attrsToPass, propsToUse, DescriptiveIncident);

    const contextHanlder = new HTMLFragmentedContextHandler({
      ...propsToUse,
      html: hasOwnProp(propsToUse, 'html') ? propsToUse.html : this.html,
      css: hasOwnProp(propsToUse, 'css') ? propsToUse.css : this.css,
      fonts: hasOwnProp(propsToUse, 'fonts') ? propsToUse.fonts : this.fonts,
    });

    this.ownContext = {
      ...contextHanlder.context,
      isHostedClip: false,
    };
    this.iframe = contextHanlder.iframeElement;

    this.contextHandler = contextHanlder;

    this.onDOMCLipInitialise();

    // as soon as a Fragmented Clip is been initialised that means the Descriptive
    // Clip has a selector and not a host. Thus is not a hosted clip
    // this.isHostedClip = false;
  }

  exportConstructionArguments() {
    // TODO also export CSS and fonts taking in account the potential existence
    // of them on the get methods

    return {
      attrs: this.attrs,
      props: { ...this.props, html: this.context.rootElement.innerHTML },
    };
  }

  onDOMCLipInitialise() {
    // implement here
  }

  get rootElement() {
    return this.context.rootElement;
  }

  /**
   * renderOnDOM method renders the Clip on the DOM
   */
  renderOnDOM() {
    this.contextHandler.renderOnDOM();
  }

  /**
   * removeFromDOM removes the Clip from the DOM
   */
  removeFromDOM() {
    this.contextHandler.removeFromDOM();
  }
}

export default OriginalCASIClip;
