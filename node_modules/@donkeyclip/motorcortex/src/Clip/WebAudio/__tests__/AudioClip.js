/* eslint-disable sonarjs/no-duplicate-string */
import AudioPlaybackChannel from '../../../Channels/Media/AudioPlaybackChannel';
import NullClip from '../../Browser/Descriptive/helpers/NullClip';
import {
  AudioPlayback,
  CoreAudioClip as _AudioClip,
  HTMLClip,
  TimeCapsule as _TimeCapsule,
} from '../../../main';
import ReadAudioClip from '../AudioClip';
import { audioSrc } from './audioSrc';

const TimeCapsule = new _TimeCapsule();

const AudioClip = new _AudioClip({
  audioSources: [
    {
      src: 'http://www.hochmuth.com/mp3/Tchaikovsky_Rococo_Var_orch.mp3',
      id: 'classic',
      classes: ['classic'],
      base64: false,
    },
  ],
  id: 'audioClip',
  root: true,
});

const AudioClip2 = new _AudioClip({
  audioSources: [
    {
      src: audioSrc,
      id: 'hello',
      mcid: 'hello',
      classes: ['human'],
      base64: true,
    },
  ],
  id: 'audioClip2',
});

const MutedClip = new HTMLClip({
  html: '',
  css: '',
  audio: 'off',
  selector: '#host',
  id: 'mutedClip',
});

const FullClip = new HTMLClip({
  html: '',
  css: '',
  selector: '#host2',
  id: 'fullClip',
});

const PlaybackHello = new AudioPlayback(
  {},
  {
    selector: '~#hello',
    duration: 6000,
    startFrom: 1200,
    id: 'playback-hello',
  },
);

test('expect AudioClips to contain only audioClip and no real TimedTree', () => {
  expect(AudioClip.realClip).toBeInstanceOf(NullClip);
  expect(AudioClip2.realClip).toBeInstanceOf(NullClip);
});

test('expect a HTMLDescriptiveClip with audio false not to have an audioClip', () => {
  expect(MutedClip.audioClip).toBeInstanceOf(NullClip);
});

test('expect a HTMLDescriptiveClip with audio on to have an audioClip', () => {
  expect(FullClip.audioClip).toBeInstanceOf(ReadAudioClip);
});

test('Add AudioClip to another AudioClip', () => {
  const res = AudioClip.addIncident(AudioClip2, 0);
  expect(res.result).toBe(true);
  expect(
    AudioClip.audioClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ].incidents.length,
  ).toBe(1);
  expect(
    AudioClip.audioClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ].incidents,
  ).toEqual([{ id: 'audioClip2', millisecond: 0 }]);
  expect(AudioClip2.audioClip.context.masterNode.output.connection).toBe(
    AudioClip.audioClip.context.masterNode.input,
  );
});

test('move an AudioClip', () => {
  const res = AudioClip.moveIncident(AudioClip2, 1000);
  expect(res.result).toBe(true);
  expect(
    AudioClip.audioClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ].incidents,
  ).toEqual([{ id: 'audioClip2', millisecond: 1000 }]);
  expect(AudioClip.duration).toBe(1000);
});

test('resize an AudioClip that has an empty AudioClip in it', () => {
  const res = AudioClip.resize(2000);
  expect(res.result).toBe(true);
  expect(AudioClip2.duration).toBe(0);
});

test('remove an AudioClip from another AudioClip and expect to get disconnected from its node', () => {
  const res = AudioClip.removeIncident(AudioClip2);
  expect(res.result).toBe(true);
  expect(
    AudioClip.audioClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ].incidents.length,
  ).toBe(0);
  expect(AudioClip2.audioClip.context.masterNode.output.connection).toBe(
    'destination',
  );
  expect(AudioClip.duration).toBe(0);
});

test('adding a muted clip to an AudioClip should result to no change', () => {
  const res = MutedClip.addIncident(AudioClip, 0);
  expect(res.result).toBe(true);
  expect(
    MutedClip.realClip.instantiatedChannels[
      '@donkeyclip/self-contained-incidents'
    ],
  ).toBe(undefined);
});

test('adding an AudioPlayback by id selector should add one MediaPlayback Incident to channels', () => {
  AudioClip.addIncident(AudioClip2, 0);
  const res = AudioClip2.addIncident(PlaybackHello, 1000);
  expect(res.result).toBe(true);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback'],
  ).toBeInstanceOf(AudioPlaybackChannel);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .incidents,
  ).toEqual([{ id: 'playback-hello_hello', millisecond: 1000 }]);
  expect(AudioClip2.duration).toBe(7000);
  expect(MutedClip.duration).toBe(7000);
});

test('moving an AudioPlayback should reflect properly in channels', () => {
  const res = AudioClip2.moveIncident(PlaybackHello, 2000);
  expect(res.result).toBe(true);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback'],
  ).toBeInstanceOf(AudioPlaybackChannel);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .incidents,
  ).toEqual([{ id: 'playback-hello_hello', millisecond: 2000 }]);
  expect(AudioClip2.duration).toBe(8000);
  expect(AudioClip.duration).toBe(8000);
  expect(MutedClip.duration).toBe(8000);
});

test('test execution (start / stop) of AudioPlayback Incident', () => {
  AudioClip.play(true);
  AudioClip.playableProgress(1500 / AudioClip.duration, 1500);
  AudioClip.playableProgress(1800 / AudioClip.duration, 1800);
  AudioClip.playableProgress(2100 / AudioClip.duration, 2100);
  AudioClip.playableProgress(3000 / AudioClip.duration, 3000);
  AudioClip.playableProgress(8000 / AudioClip.duration, 8000);
  AudioClip.playableProgress(1800 / AudioClip.duration, 1800);

  expect(
    AudioClip2.audioClip.instantiatedChannels[
      '@donkeyclip/media-playback'
    ].incidentsById[
      'playback-hello_hello'
    ].contexts.audioClip2.audioNode.exportLog(),
  ).toEqual([
    { event: 'start', ms: 1.3 },
    { event: 'stop' },
    { event: 'stop' },
  ]);
});

test('make sure that AudioPlaybacks are not executed on seek', () => {
  AudioClip2.audioClip.instantiatedChannels[
    '@donkeyclip/media-playback'
  ].incidentsById[
    'playback-hello_hello'
  ].contexts.audioClip2.audioNode.clearLog();
  const journey = TimeCapsule.startJourney(AudioClip);
  journey.station(1500);
  journey.station(1800);
  journey.station(2100);
  journey.station(3000);
  journey.station(8000);
  journey.destination(1800);
  expect(
    AudioClip2.audioClip.instantiatedChannels[
      '@donkeyclip/media-playback'
    ].incidentsById[
      'playback-hello_hello'
    ].contexts.audioClip2.audioNode.exportLog(),
  ).toEqual([]);
});

test("expect the currentMillisecond of audioClip to be up to date even though it doesn't participate on seek", () => {
  expect(AudioClip2.audioClip.runTimeInfo.currentMillisecond).toBe(1800);
});

test('expect the audioClip and audio playback to execute properly after journey', () => {
  AudioClip.play(true);
  AudioClip.playableProgress(2100 / AudioClip.duration, 2100);
  expect(
    AudioClip2.audioClip.instantiatedChannels[
      '@donkeyclip/media-playback'
    ].incidentsById[
      'playback-hello_hello'
    ].contexts.audioClip2.audioNode.exportLog(),
  ).toEqual([{ event: 'start', ms: 1.3 }]);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .playingIncidentsIds,
  ).toEqual(['playback-hello_hello|||audioClip2']);
});

test('expect AudioPlayback to stop when seek starts', () => {
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .incidentsById['playback-hello_hello'].contexts.audioClip2.audioNode
      .status,
  ).toEqual('playing');
  const journey = TimeCapsule.startJourney(AudioClip);
  journey.station(1800);
  journey.station(2100);
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .incidentsById['playback-hello_hello'].contexts.audioClip2.audioNode
      .status,
  ).toEqual('stopped');
  expect(
    AudioClip2.audioClip.instantiatedChannels['@donkeyclip/media-playback']
      .playingIncidentsIds,
  ).toEqual([]);
  journey.destination(1800);
});

test('expect all playing Playbacks to stop on pause', () => {
  AudioClip2.audioClip.instantiatedChannels[
    '@donkeyclip/media-playback'
  ].incidentsById[
    'playback-hello_hello'
  ].contexts.audioClip2.audioNode.clearLog();
  AudioClip.play(true);
  AudioClip.playableProgress(2100 / AudioClip.duration, 2100);
  AudioClip.pause();
  expect(
    AudioClip2.audioClip.instantiatedChannels[
      '@donkeyclip/media-playback'
    ].incidentsById[
      'playback-hello_hello'
    ].contexts.audioClip2.audioNode.exportLog(),
  ).toEqual([{ event: 'start', ms: 1.3 }, { event: 'stop' }]);
});
