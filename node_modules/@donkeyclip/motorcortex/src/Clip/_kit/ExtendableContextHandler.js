/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import helper, { hasOwnProp } from '../../_coreUtils/helper';

/**
 * This Class acts more as an Abstract Class. Developers that want to create new Clip types
 * need to extend this Class and implement the methods listed here
 */
export default class ExtendableContextHandler {
  /**
   * @param {object} props
   * The constructor makes sure it assigns all methods of the ContextHandler to
   * the context object it creates.
   */
  constructor(props) {
    this.props = props;
    this.customEntities = {};
    this.elementsByMCID = {};
    this.setContext();
  }

  setContext(obj = {}) {
    this.context = {
      audio: false,
      contextLoaded: false,
      getElements: this._getElements.bind(this),
      getElementSelectorByMCID: this._getElementSelectorByMCID.bind(this),
      getElementByMCID: this.getElementByMCID.bind(this),
      setCustomEntity: this.setCustomEntity.bind(this),
      getMCID: this._getMCID.bind(this),
      setMCID: this.setMCID.bind(this),
      unmount: this.unmount.bind(this),
      ...obj,
    };
  }

  /**
   * _getElements method is not overwritten by the child Classes. What it
   * does is to make sure the provided selector is valid and handle the case
   * of the special selector (starting with "!") which returns custom entities
   * @param {string} selector
   * @return {*[]|Array}
   * @private
   */
  _getElements(selector) {
    if (selector === null || selector === undefined || selector === '') {
      return [];
    }
    if (selector.charAt(0) === '!') {
      selector = selector.substr(1);
      if (selector.charAt(0) === '#') {
        return [this.customEntities[selector.substr(1)]];
      }
      if (selector.charAt(0) === '.') {
        const toReturn = [];
        for (const key in this.customEntities) {
          const entity = this.customEntities[key];
          if (entity.classes.includes(selector.substr(1))) {
            toReturn.push(entity);
          }
        }
        return toReturn;
      }
    }
    return this.getElements(selector);
  }

  /**
   * Acts as a proxy before forwarding the call the getMCID implementation
   * of each ContextHandler, after it has first checked customEntities
   * @param {element} element: Given an element it provides back its mcid
   * @return {string}: The MC id of the provided element
   * @private
   */
  _getMCID(element) {
    return element.customEntity ? element.id : this.getMCID(element);
  }

  /**
   * Given an mcid the ContextHandler will provide a string selector that selects the
   * element that has this mcid
   * @param {string} mcid
   * @return {string}
   * @private
   */
  _getElementSelectorByMCID(mcid) {
    if (hasOwnProp(this.customEntities, mcid)) {
      return `!#${mcid}`;
    }
    return this.getElementSelectorByMCID(mcid);
  }

  /**
   * Given an mcid ContextHandler will return the element that has it
   * @param {string} mcid
   */
  getElementByMCID(mcid) {
    if (hasOwnProp(this.customEntities, mcid)) {
      return this.customEntities[mcid];
    }
    if (hasOwnProp(this.elementsByMCID, mcid)) {
      return this.elementsByMCID[mcid];
    }

    const element = this._getElements(this._getElementSelectorByMCID(mcid))[0];
    this.elementsByMCID[mcid] = element;
    return element;
  }

  /**
   * @param {string} selector: A selector string to select the elements
   * @return {array}: An array of all elements that apply to the selector
   */
  // eslint-disable-next-line no-unused-vars
  getElements(selector) {
    return [];
  }

  /**
   * @param {element} element: Given an element it provides back its mcid
   * @return {string}: The MC id of the provided element
   */
  // eslint-disable-next-line no-unused-vars
  getMCID(element) {}

  /**
   * Given an element and an mc id the ContextHandler assigns the mc id to the element
   * @param {element} element
   * @param {string} mcid
   */
  // eslint-disable-next-line no-unused-vars
  setMCID(element, mcid) {}

  /**
   * Given an mcid the ContextHandler will provide a string selector that selects the
   * element that has this mcid
   * @param {string} mcid
   * @return {string}
   */
  // eslint-disable-next-line no-unused-vars
  getElementSelectorByMCID(mcid) {}

  /**
   * This method unmounts the Clip
   */
  unmount() {}

  /**
   * Sets a custom entity. Custom entities are analysed on docs.motorcortex.com
   * @param {string} id: The id of the custom entity
   * @param {any} entity: The entity itself. Can be any type
   * @param {array} classes: A list of classes the user wants to assign to its custom entity
   * @return {boolean}
   */
  setCustomEntity(id, entity, classes = []) {
    if (hasOwnProp(this.customEntities, id)) {
      helper.error(`Clip ${this.id} already has custom Entity with id: ${id}`);
      return false;
    }

    this.customEntities[id] = {
      id,
      entity,
      classes,
      customEntity: true,
    };
    return true;
  }
}
