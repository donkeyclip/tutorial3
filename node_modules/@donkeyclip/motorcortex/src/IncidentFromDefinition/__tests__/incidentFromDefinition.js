import Group from '../../RealIncidents/Group';
import DescriptiveGroup from '../../DescriptiveIncidents/DescriptiveGroup';
import incidentFromDefinition from '../incidentFromDescription';

test('incidentFromDefinition of a single DescriptiveGroup should create a real Group', () => {
  const dg1 = new DescriptiveGroup({});
  const incidentFromDef = incidentFromDefinition(dg1, {
    context: {},
    clipId: 'test-clip-id',
  });

  expect(incidentFromDef.id).toEqual(dg1.id);
  expect(incidentFromDef.constructor).toEqual(Group);
});

test('incidentFromDefinition of a tree consisting of DescriptiveGroups should create the corresponding real tree', () => {
  const dg2 = new DescriptiveGroup({});
  const dg21 = new DescriptiveGroup({});
  const dg22 = new DescriptiveGroup({});
  const dg211 = new DescriptiveGroup({});

  dg2.addChild(dg21, 1000);
  dg2.addChild(dg22, 2000);
  dg21.addChild(dg211, 3000);

  const incidentFromDef = incidentFromDefinition(dg2, {
    context: {},
    clipId: 'test-clip-id',
  });

  expect(incidentFromDef.id).toEqual(dg2.id);
  expect(Object.keys(incidentFromDef.children).length).toEqual(2);
  expect(Object.keys(incidentFromDef.children)).toContain(dg21.id);
  expect(Object.keys(incidentFromDef.children)).toContain(dg22.id);
  expect(incidentFromDef.children[dg21.id].position).toEqual(1000);
  expect(incidentFromDef.children[dg21.id].id).toEqual(dg21.id);
  expect(incidentFromDef.children[dg22.id].position).toEqual(2000);
  expect(incidentFromDef.children[dg22.id].id).toEqual(dg22.id);

  expect(
    Object.keys(incidentFromDef.children[dg21.id].leaf.children).length,
  ).toEqual(1);
  expect(
    incidentFromDef.children[dg21.id].leaf.children[dg211.id].position,
  ).toEqual(3000);
  expect(incidentFromDef.children[dg21.id].leaf.children[dg211.id].id).toEqual(
    dg211.id,
  );
});
