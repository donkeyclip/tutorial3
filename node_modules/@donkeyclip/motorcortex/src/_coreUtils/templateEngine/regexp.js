/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { isObject } from '../helper';
export const curlyBracketsOpenCloseRegexp = /({{ *| *}})/g;

export function itemsIdentifierRegexp(items, asString = false) {
  const itemsKeys = Object.keys(items).join('|');
  if (itemsKeys === '') {
    return false;
  }
  const itemsIdentifierRegex = `(\\b(${itemsKeys})\\b)(((\\.[a-zA-Z_]\\w*)|(\\[\\d*\\]))*)(?![a-z,A-Z_0-9])`;
  if (asString) {
    return itemsIdentifierRegex;
  }
  return new RegExp(itemsIdentifierRegex, 'g');
}

export function keysIdentifierRegexp(keys) {
  if (!isObject(keys)) {
    return false;
  }
  const theKeys = Object.keys(keys).join('|');
  if (!theKeys) {
    return false;
  }
  const keysIdentifierRegex = `(\\b(${theKeys}\\b))(?![a-z,A-Z_0-9.\\[])`;
  return new RegExp(keysIdentifierRegex, 'g');
}

export function ofAttributeValueRegexp(items) {
  const ofAttrRegx = `^ *${itemsIdentifierRegexp(items, true)} *$`;
  return new RegExp(ofAttrRegx, 'g');
}

// TODO  ignore backslashed double curly brackets
export const dynamicExpressionsRegexp = /{{((?!}}).)*}}/g; // right test it on "{{   fsdaf }} and {{ τεστ {{ τεστ }} }} {{ {{ test }}"
export const dynamicExpressionsOnlyIfRegexp = /( *mc-if *= *" *)[^"]*(?=")/g; // for backwards lookup (when safari supports it
// we will use  /(?<= *mc-if *= *" *)[^"]*(?=")/g;
// TODO  regex that identifies blackslashed double curly brackets

export const singleQuotesRegexp = /'.*'/g;

export const integerRegexp = /^ *\d* *$/;

export const fullStringRegexp =
  /^ *([0-9.]+|('([^']|\\')*([^\\]')))( *\+ *([0-9.]+|('([^']|\\')*([^\\]'))))* *$/g;
export const stringComparisonRegexp =
  /^( *([0-9.]+|('([^']|\\')*([^\\]')))( *\+ *([0-9.]+|('([^']|\\')*([^\\]'))))* *)(==|===)( *([0-9.]+|('([^']|\\')*([^\\]')))( *\+ *([0-9.]+|('([^']|\\')*([^\\]'))))* *)$/g;
