import { getOfValue, parseKnownParams, resolveIfs, parse } from '../parser';

const initParamsX = 'initParams.x';

const items = {
  initParams: {
    x: initParamsX,
    y: [0, 1, 2],
    num: 3,
    set: [
      {
        name: 'Alpha',
        arr: ['1 inner A', '1 inner B', '1 inner C'],
        num: 1,
      },
      {
        name: 'Beta',
        arr: ['2 inner A', '2 inner B', '2 inner C'],
        num: 2,
      },
      {
        name: 'Gamma',
        arr: ['3 inner A', '3 inner B', '3 inner C'],
        num: 3,
      },
    ],
    html: `<script src="https://www.test.com/a.js"></script>`,
    htmlSet: [
      {
        string: `<script src="https://www.test.com/a.js"></script>`,
      },
    ],
  },
  attrs: {
    x: 'attrs.x',
    width: '100%',
    height: '40px',
  },
};

const keys = {
  key: 'key',
  keyA: 'key a',
  keyAB: 'key a b',
};

test('P1. parseKnownParams', () => {
  const template = `
    template test {{ initParams.x + '_test' }}
    mc-if=" initParams.y[2] === 4 "
    mc-if=" initParams.y[2] === 2 "
    mc-if=" initParams.y.length === 3 "
    mc-if=" 'test' + initParams.y[2] === 'test' + '2' "
    mc-if=" 'test' + initParams.y[2] == 'test' + '2' "
    mc-if=" 'test' + initParams.y[2] == 'test' + '2' === 'test 3' "
    mc-if=" 'test' + initParams.y[2] ==  "
    mc-if=" 'test' + initParams.y[2] ==="
    -- numeric --
    {{ 3 + initParams.y[2]*2 }} / should be 7
    {{ 3 + initParams.y[2] === initParams.y[1]*5/5 + 4 }} / should be true
    {{ 3 + initParams.y[2] !== 4 }} / should be true
    {{ 3 + initParams.y[2] != 4 }} / should be true
    {{ 3 + initParams.y[2] > 4 }} / should be true
    {{ 3 + initParams.y[2] >= 4 }} / should be true
    {{ 3 + initParams.y[2] < 4 }} / should be false
    {{ 3 + initParams.y[2] <= 4 }} / should be false
    {{ 3 + initParams.y[2] >= 5 }} / should be true
    {{ 3 + initParams.y[2] <= 5 }} / should be true
    mc-of = "initParams.y"
    {{ initParams.y.length }} / should be 3
    wrong = {{ { } }
    undefined = {{ attrs.z + 2 }}
    {{ key }}
    {{ keyAB }}
    {{ keyA }}
    {{ keyABC }}
    {{ keyABC + 'keyAB' + keyAB  }}
  `;
  const res = parseKnownParams(template, { items, keys });
  expect(res).toBe(`
    template test initParams.x_test
 mc-if="false"
 mc-if="true"
 mc-if="true"
 mc-if="true"
 mc-if="true"
 mc-if="'test' + 2 == 'test' + '2' === 'test 3' "
 mc-if="'test' + 2 ==  "
 mc-if="'test' + 2 ==="
    -- numeric --
    7 / should be 7
    true / should be true
    true / should be true
    true / should be true
    true / should be true
    true / should be true
    false / should be false
    false / should be false
    true / should be true
    true / should be true
    mc-of = "initParams.y"
    3 / should be 3
    wrong = {{ { } }
    undefined = {{undefined + 2}}
    key
    key a b
    key a
    {{keyABC}}
    {{keyABC + ''key a b'' + 'key a b'}}
  `);
});

test(`resolveIfs test`, () => {
  const elementHTML = `
  <div>
    <div mc-if="true">Must stay</div>
    <div mc-if="false">Must go</div>
    <div mc-if="{{ anything else }}">Must stay</div>
    <div mc-if="false">
        <span>Element with nested html</span>
        <span>Whick also must go</span>
    </div>
  </div>
  `;
  const element = document.createElement('div');
  element.innerHTML = elementHTML;
  resolveIfs(element);
  expect(
    element.innerHTML.replace(/ /g, '').replace(/(\r\n|\n|\r)/gm, ''),
  ).toBe(
    `<div>
      <div>Must stay</div>
      <div mc-if="{{ anything else }}">Must stay</div>
    </div>`
      .replace(/ /g, '')
      .replace(/(\r\n|\n|\r)/gm, ''),
  );
});

test(`getOfValue test`, () => {
  let element = document.createElement('div');
  element.setAttribute('mc-for', 'key,item');
  element.setAttribute('mc-of', 'initParams.y');
  let value = getOfValue(element, items);
  expect(value).toEqual([0, 1, 2]);

  element = document.createElement('div');
  element.setAttribute('mc-for', 'key,item');
  element.setAttribute('mc-of', '  initParams.y  ');
  value = getOfValue(element, items);
  expect(value).toEqual([0, 1, 2]);

  element = document.createElement('div');
  element.setAttribute('mc-for', 'key,item');
  element.setAttribute('mc-of', '  initParams.x  ');
  value = getOfValue(element, items);
  expect(value).toEqual(initParamsX);

  element = document.createElement('div');
  element.setAttribute('mc-for', 'key,item');
  element.setAttribute('mc-of', '  something   ');
  value = getOfValue(element, items);
  expect(value).toEqual(false);

  element = document.createElement('div');
  element.setAttribute('mc-for', 'key,item');
  element.setAttribute('mc-of', 'initParams.num');
  value = getOfValue(element, items);
  expect(value).toEqual(['', '', '']);
});

test(`successful parse html containing loops`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span class="{{ 'class_' + loopkey }}">{{ item.name }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span class="class_0">Alpha</span>
      </div>
      <div class="looper">
          <span class="class_1">Beta</span>
      </div>
      <div class="looper">
          <span class="class_2">Gamma</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html containing integer loops`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="3">
        <span class="{{ 'class_' + loopkey }}">{{ loopkey }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span class="class_0">0</span>
      </div>
      <div class="looper">
          <span class="class_1">1</span>
      </div>
      <div class="looper">
          <span class="class_2">2</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html containing integer loops taken from initParams`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.num">
        <span class="{{ 'class_' + loopkey }}">{{ loopkey }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span class="class_0">0</span>
      </div>
      <div class="looper">
          <span class="class_1">1</span>
      </div>
      <div class="looper">
          <span class="class_2">2</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`unsuccessful parse html because of non-single element`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span class="{{ 'class_' + loopkey }}">{{ item.name }}</span>
    </div>
  </div>
  <div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span class="{{ 'class_' + loopkey }}">{{ item.name }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div></div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`unsuccessful parse html because of looped root element`, () => {
  const template = `<div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span class="{{ 'class_' + loopkey }}">{{ item.name }}</span>
    </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div></div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html with nested loops`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span mc-for="spankey,spanitem" mc-of="item.arr" class="{{ 'class_' + loopkey }}">{{ item.name }} {{ spanitem }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span class="class_0">Alpha 1 inner A</span>
          <span class="class_0">Alpha 1 inner B</span>
          <span class="class_0">Alpha 1 inner C</span>
      </div>
      <div class="looper">
          <span class="class_1">Beta 2 inner A</span>
          <span class="class_1">Beta 2 inner B</span>
          <span class="class_1">Beta 2 inner C</span>
      </div>
      <div class="looper">
          <span class="class_2">Gamma 3 inner A</span>
          <span class="class_2">Gamma 3 inner B</span>
          <span class="class_2">Gamma 3 inner C</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html with ifs within loops`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.set">
        <span mc-if="loopkey%2 === 0" class="{{ 'class_' + loopkey }}">{{ item.name }} {{ (loopkey+item.num)^2 }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span class="class_0">Alpha 1</span>
      </div>
      <div class="looper">
      </div>
      <div class="looper">
          <span class="class_2">Gamma 25</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse of css code`, () => {
  const template = `
  .test{
    width: {{ attrs.width }};
    height: {{ attrs.height }};
  }
  `;
  const res = parse(template, { keys, items });
  expect(res.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
     .test{
      width: 100%;
      height: 40px;
     }
    `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html with escaped html`, () => {
  const template = `<div id="root">
    {{ initParams.html }}
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      &lt;scriptsrc="https://www.test.com/a.js"&gt;&lt;/script&gt;
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});

test(`successful parse html containing loops with strings that should be html escaped`, () => {
  const template = `<div id="root">
    <div class="looper" mc-for="loopkey,item" mc-of="initParams.htmlSet">
        <span>{{ item.string }}</span>
    </div>
  </div>
  `;
  const res = parse(template, { keys, items }, true);
  expect(res.outerHTML.replace(/(\r\n|\n|\r)/gm, '').replace(/ /g, '')).toEqual(
    `
    <div id="root">
      <div class="looper">
          <span>&lt;scriptsrc="https://www.test.com/a.js"&gt;&lt;/script&gt;</span>
      </div>
    </div>
  `
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ /g, ''),
  );
});
