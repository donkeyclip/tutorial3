/* eslint-disable sonarjs/no-duplicate-string */

import {
  itemsIdentifierRegexp,
  keysIdentifierRegexp,
  ofAttributeValueRegexp,
  fullStringRegexp,
  stringComparisonRegexp,
  dynamicExpressionsRegexp,
  integerRegexp,
} from '../regexp';

const items = {
  attrs: {
    x: [{ y: '-Y-' }],
  },
  initParams: {
    x: {
      y: ['-0-'],
    },
  },
};

const keys = {
  key: 1,
  key2: 2,
  keykey: 3,
};
const keyRegex = keysIdentifierRegexp(keys);

const regex = itemsIdentifierRegexp(items);

const attrs = 'attrs.x[0].y';
const initParams = 'initParams.x.y[0]';
const attrsy = 'attrs.y';

test(`dynamicExpressions regexp test`, () => {
  let string = 'test {{ attrs.x[0].y + alpha + initParams.x.y[0] plus }} test';
  let res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual(['{{ attrs.x[0].y + alpha + initParams.x.y[0] plus }}']);

  string = 'test {{ attrs.x[0].y + alpha + initParams.x.y[0] plus } test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual(null);

  string = 'test {{ attrs.x[0].y + alpha }} + initParams.x.y[0] plus }} test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual(['{{ attrs.x[0].y + alpha }}']);

  string =
    'test {{ attrs.x[0].y + alpha }} + {{ initParams.x.y[0] plus }} test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual([
    '{{ attrs.x[0].y + alpha }}',
    '{{ initParams.x.y[0] plus }}',
  ]);

  string = 'test {{ attrs.x[0].y + alpha }} + {{ initParams.x.y[0] plus  test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual(['{{ attrs.x[0].y + alpha }}']);

  string =
    'test {{ attrs.x[0].y[ + alpha }} + {{ initParams.x.y[0][ plus }} test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual([
    '{{ attrs.x[0].y[ + alpha }}',
    '{{ initParams.x.y[0][ plus }}',
  ]);

  string = 'test {{ attrs + alpha }} + {{ initParams plus }} test';
  res = string.match(dynamicExpressionsRegexp);
  expect(res).toEqual(['{{ attrs + alpha }}', '{{ initParams plus }}']);
});

test(`itemsIdentifier regexp check`, () => {
  let string = 'attrs.x[0].y + alpha + initParams.x.y[0] test attrs.y';
  let res = string.match(regex);
  expect(res).toEqual([attrs, initParams, attrsy]);

  string = 'pattrs.x[0].y + alpha + binitParams.x.y[0] test battrs.y';
  res = string.match(regex);
  expect(res).toEqual(null);

  string = 'attrs.x[0].y*4 + alpha + (initParams.x.y[0] + 2) - test*attrs.y';
  res = string.match(regex);
  expect(res).toEqual([attrs, initParams, attrsy]);

  string = 'attrs_ + alpha + (initParams_.x.y[0] + 2) - test*attrs_';
  res = string.match(regex);
  expect(res).toEqual(null);

  string = 'attrs + alpha + (initParamsattrs.x.y[0] + 2) - test*attrs_';
  res = string.match(regex);
  expect(res).toEqual(['attrs']);

  string = '2attrs + alpha + (initParams.x.y[0]3 + 2) - test*attrs_';
  res = string.match(regex);
  expect(res).toEqual(['initParams.x.y']);

  const items2 = {
    attrs: 3,
    attrs2: 4,
  };
  const items2Regex = itemsIdentifierRegexp(items2);
  string = 'attrs2 + alpha + attrs ';
  res = string.match(items2Regex);
  expect(res).toEqual(['attrs2', 'attrs']);
});

test(`keysIdentifier regexp check`, () => {
  let string = 'key + key2 + keykey + keykeykey';
  let res = string.match(keyRegex);
  expect(res).toEqual(['key', 'key2', 'keykey']);

  string = 'akey + _key2 + 3keykey + keykeykey';
  res = string.match(regex);
  expect(res).toEqual(null);
});

test('fullStringRegexp regex test', () => {
  let string = `'test' + 'another test' + 3.5   + 'test'`;
  let res = string.match(fullStringRegexp);
  expect(res).toEqual([string]);

  string = `9 'test' + 'another test' + 3.5   + 'test'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `9 + 'test' + 'another test' + 3.5   + 'test' + `;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `9 + 'test' + 'another test' + 3.5   + 'test'+`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `+9 + 'test' + 'another test' + 3.5   + 'test'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `9 ++ 'test' + 'another test' + 3.5   + 'test'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `9 + + 'test' + 'another test' + 3.5   + 'test'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `\\'test'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `'test' + `;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test\\'`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);

  string = `"test" + "another test" + 3.5   + "test"`;
  res = string.match(fullStringRegexp);
  expect(res).toEqual(null);
});

test('stringComparisonRegexp regex test', () => {
  let string = `'test' + 'another test' + 3.5   + 'test' == 33`;
  let res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another test' + 3.5   + 'test' === 33`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another test' + 3.5   + 'test'=== 33`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another test' + 3.5   + 'test' ===33`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another test' + 3.5   + 'test' ===`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test' ==`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test' === `;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test' == `;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another test' + 3.5   + 'test'`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);

  string = `'test' + 'another \\'test\\'' + 3.5   + 'test' ===33`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another \\'test\\'' + 3.5   + 'test' ==='33'`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual([string]);

  string = `'test' + 'another \\'test\\'' + 3.5   + 'test' ==='33`;
  res = string.match(stringComparisonRegexp);
  expect(res).toEqual(null);
});

test(`ofAttributeValidity test`, () => {
  const regex = ofAttributeValueRegexp(items);
  let string = 'initParams.x';
  expect(string.match(regex)).toEqual(['initParams.x']);

  string = 'initParams.x.';
  expect(string.match(regex)).toEqual(null);

  string = 'initParams.x attrs[3]';
  expect(string.match(regex)).toEqual(null);

  string = '  initParams.x ';
  expect(string.match(regex)).toEqual(['  initParams.x ']);

  string = 'initParams.x[';
  expect(string.match(regex)).toEqual(null);
});

test('integerRegexp', () => {
  let res = '9'.match(integerRegexp);
  expect(res[0]).toBe('9');

  res = '9 4'.match(integerRegexp);
  expect(res).toEqual(null);

  res = ' 99 '.match(integerRegexp);
  expect(res[0]).toBe(' 99 ');

  res = ' 99.6 '.match(integerRegexp);
  expect(res).toBe(null);

  res = ' 99 b'.match(integerRegexp);
  expect(res).toBe(null);

  res = 'b 99 '.match(integerRegexp);
  expect(res).toBe(null);
});
