/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { mcNameSpace } from '../../../_configuration/generalConf';
import { hasOwnProp, isString } from '../../helper';

export function addToNameSpace(
  path,
  value,
  replace = false,
  namespace = mcNameSpace,
  win = window,
) {
  if (!hasOwnProp(win, namespace)) {
    win[namespace] = {};
  }
  let currentObject = win[namespace];
  const arrayPath = path.split('.');

  for (let i = 0; i < arrayPath.length - 1; i++) {
    if (!hasOwnProp(currentObject, arrayPath[i])) {
      currentObject[arrayPath[i]] = {};
    }
    currentObject = currentObject[arrayPath[i]];
  }

  if (!replace && hasOwnProp(currentObject, arrayPath[arrayPath.length - 1])) {
    return false;
  }

  currentObject[arrayPath[arrayPath.length - 1]] = value;
  return true;
}

export function getFromNameSpace(path, namespace = mcNameSpace, win = window) {
  if (namespace !== '') path = `${namespace}.${path}`;
  const arrayPath = path.replaceAll(/\]/g, '').split(/[[.]/g);

  let currentObject = win;
  for (let i = 0; i < arrayPath.length; i++) {
    if (!hasOwnProp(currentObject, arrayPath[i])) {
      if (
        i === arrayPath.length - 1 &&
        arrayPath[i] === 'length' && // if it's the last key and it's "length"
        (isString(currentObject) || Array.isArray(currentObject))
      ) {
        // and its either a string or an array
        return currentObject.length;
      }
      return undefined;
    }
    currentObject = currentObject[arrayPath[i]];
  }
  return currentObject;
}

export function removeFromNameSpace(
  path,
  namespace = mcNameSpace,
  win = window,
) {
  if (!hasOwnProp(win, namespace)) {
    win[namespace] = {};
  }
  let currentObject = win[namespace];
  const arrayPath = path.split('.');

  for (let i = 0; i < arrayPath.length - 1; i++) {
    if (!hasOwnProp(currentObject, arrayPath[i])) {
      return false;
    }
    currentObject = currentObject[arrayPath[i]];
  }

  if (!hasOwnProp(currentObject, arrayPath[arrayPath.length - 1])) {
    return false;
  }

  delete currentObject[arrayPath[arrayPath.length - 1]];
  return true;
}

export function pushToNameSpace(
  path,
  value,
  namespace = mcNameSpace,
  win = window,
) {
  if (!hasOwnProp(win, namespace)) {
    win[namespace] = {};
  }
  let currentObject = win[namespace];
  const arrayPath = path.split('.');

  for (let i = 0; i < arrayPath.length - 1; i++) {
    if (!hasOwnProp(currentObject, arrayPath[i])) {
      currentObject[arrayPath[i]] = {};
    }
    currentObject = currentObject[arrayPath[i]];
  }

  if (!hasOwnProp(currentObject, arrayPath[arrayPath.length - 1])) {
    currentObject[arrayPath[arrayPath.length - 1]] = [value];
    return true;
  }

  if (!Array.isArray(currentObject[arrayPath[arrayPath.length - 1]])) {
    return false;
  }

  currentObject[arrayPath[arrayPath.length - 1]].push(value);
  return true;
}
