import {
  getFromNameSpace,
  addToNameSpace,
  removeFromNameSpace,
  pushToNameSpace,
} from '../nameSpaceHandler/nameSpaceHandler';
import { mcNameSpace } from '../../../_configuration/generalConf';

const customWindow = {};

const literal1 = 'test.test2.test3';
const literal2 = 'test.test22.test3';
const literal3 = 'path.to.array';

test('NS 01. Add to name space, replace & nameSpace default', () => {
  addToNameSpace(literal1, 3, false, mcNameSpace, customWindow);
  expect(getFromNameSpace(literal1, mcNameSpace, customWindow)).toBe(3);
});

test('NS 02. Add to name space, replace=false & nameSpace = custom', () => {
  addToNameSpace(literal1, 3, false, '__custom', customWindow);
  expect(getFromNameSpace(literal1, '__custom', customWindow)).toBe(3);
});

test('NS 03. Add to name space, replace=false & nameSpace = custom should return false if value exists', () => {
  const res = addToNameSpace(literal1, 4, false, '__custom', customWindow);
  expect(res).toBe(false);
  expect(getFromNameSpace(literal1, '__custom', customWindow)).toBe(3);
});

test('NS 04. Add to name space, replace=true & nameSpace = custom should return true replacing the value', () => {
  const res = addToNameSpace(literal1, 4, true, '__custom', customWindow);
  expect(res).toBe(true);
  expect(getFromNameSpace(literal1, '__custom', customWindow)).toBe(4);
});

test('NS 05. Try to remove from namespace something that does not exist', () => {
  const res = removeFromNameSpace('ttest', '__custom', customWindow);
  expect(res).toBe(false);
});

test('NS 06. Try to remove from namespace something that exists', () => {
  const res = removeFromNameSpace('test.test2', '__custom', customWindow);
  expect(res).toBe(true);
});

test('NS 07. Try to push a value into path that is not an array', () => {
  addToNameSpace(literal1, 3, false, '__custom', customWindow);
  const res = pushToNameSpace(literal1, 'value', '__custom', customWindow);
  expect(res).toBe(false);
});

test('NS 08. Try to push a value into path that does not exist', () => {
  const res = pushToNameSpace(literal2, 'value', '__custom', customWindow);
  expect(res).toBe(true);
});

test('NS 09. Try to push a value into an array', () => {
  addToNameSpace(literal3, [], false, '__custom', customWindow);
  const res = pushToNameSpace(literal3, 'value', '__custom', customWindow);
  expect(res).toBe(true);
  const val = getFromNameSpace(literal3, '__custom', customWindow);
  const length = getFromNameSpace(
    `${literal3}.length`,
    '__custom',
    customWindow,
  );
  expect(length).toBe(1);
  expect(val.length).toBe(1);
  expect(val[0]).toBe('value');
});

test('NS 10. Push to an array that already has elements', () => {
  const res = pushToNameSpace(literal2, 'value2', '__custom', customWindow);
  expect(res).toBe(true);
  const val = getFromNameSpace(literal2, '__custom', customWindow);
  expect(val.length).toBe(2);
  expect(val[0]).toBe('value');
  expect(val[1]).toBe('value2');
});

test('NS 11. Length of array', () => {
  const res = pushToNameSpace(literal3, 'value2', '__custom', customWindow);
  expect(res).toBe(true);
  const length = getFromNameSpace(
    `${literal3}.length`,
    '__custom',
    customWindow,
  );
  expect(length).toBe(2);
});

test('NS 12. Length of string', () => {
  const literal4 = 'test.test2.test4';
  const res = addToNameSpace(
    literal4,
    'a15digitsstring',
    true,
    mcNameSpace,
    customWindow,
  );
  expect(res).toBe(true);
  const length = getFromNameSpace(
    `${literal4}.length`,
    mcNameSpace,
    customWindow,
  );
  expect(length).toBe(15);
});
