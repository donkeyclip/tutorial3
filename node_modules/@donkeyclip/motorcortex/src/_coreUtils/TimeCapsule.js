/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import helper, { hasOwnProp } from './helper';

class Journey {
  constructor(props) {
    if (!hasOwnProp(props, 'incident')) {
      helper.error(
        'Journey constructor expects an Incident on its properties on the key "incident"',
      );
      return false;
    }

    this.memory = props.capsuleMemory;
    this.stations = [];

    this.incident = props.incident;
    this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;
    this.startState = `${this.incident.runTimeInfo.state}`;
    this.incident.stop();
  }

  station(millisecond) {
    const props = {};
    if (this.stations.length > 0) {
      props.previousStop = this.stations[this.stations.length - 1];
    }
    this.stations.push(millisecond);
    this.incident.playableProgress(
      millisecond / this.incident.duration,
      millisecond,
    );
  }

  destination(millisecond = null) {
    if (millisecond != null) {
      this.station(millisecond);
    } else {
      millisecond = this.stations[this.stations.length - 1];
    }
    this.incident.playableProgress(
      millisecond / this.incident.duration,
      millisecond,
    );
    // if the clip was playing start it again
    if (
      this.startState === 'playing' ||
      (this.startState === 'blocked' &&
        this.incident.statusBeforeBlock === 'playing')
    ) {
      this.incident.play();
    } else if (millisecond >= this.incident.duration) {
      this.incident.complete();
    } else {
      this.incident.arm();
    }
    this.memory.push(this.exportLog);
  }

  exportLog() {
    return {
      startMillisecond: this.startMillisecond,
      startState: this.startState,
      stations: this.stations,
    };
  }
}

class TimeCapsule {
  constructor() {
    this.memory = [];
  }

  startJourney(incident) {
    if (!incident) {
      helper.error('startJourney expects an Incident as an argument');
      return false;
    }

    return new Journey({ incident, capsuleMemory: this.memory });
  }
}

export default TimeCapsule;
