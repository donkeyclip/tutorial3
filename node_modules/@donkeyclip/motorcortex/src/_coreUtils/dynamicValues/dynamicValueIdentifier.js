/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { isObject, isString } from '../helper';

import { getDVs } from './DVRegistry';
const dvs = getDVs();

export function identifyDynamicValues(rootObj, path = '') {
  if (!rootObj) {
    return [];
  }

  const dynamics = [];

  for (const [key, value] of Object.entries(rootObj)) {
    if (value instanceof Element) {
      // skip the rest of the method if the field is 'host'
      continue;
    }

    // in the case it is an object or an array pass the responsibility to it
    if (isObject(value)) {
      const tmpDynamics = identifyDynamicValues(
        value,
        `${path}${path === '' ? '' : '.'}${key}`,
      );
      dynamics.push(...tmpDynamics);
      continue;
    }

    // else if it is anything else but string, just ignore it
    if (!isString(value)) {
      continue;
    }

    const trimmedValue = value.trim();

    for (let i = 0; i < dvs.length; i++) {
      const dv = dvs[i];
      if (trimmedValue.startsWith(`@${dv.preface}`)) {
        const dvInfo = {
          dynamicType: dv.preface,
          path: `${path}${path === '' ? '' : '.'}${key}`,
          Handler: dv.Handler,
          value: trimmedValue,
          // TODO here we should know and pass to data whether the field has integer: true
        };
        dynamics.push(dvInfo);
      }
    }
  }

  return dynamics;
}
