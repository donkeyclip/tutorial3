/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import conf from './conf';
import { extractParenthesisAttrsAsArray, isNumeric } from '../../helper';

/**
 * patternProps: {
 *    dynamicType: 'pattern',
		path:
		unit: '',
		type: 'measurement',
		pattern: [Array]
 * }
 */
export default class ElementPattern {
  constructor(patternProps) {
    let pattern = extractParenthesisAttrsAsArray(patternProps.value);

    let isAmount = true;
    const numericArray = [];
    for (let i = 0; i < pattern.length; i++) {
      if (!isNumeric(pattern[i])) {
        isAmount = false;
        break;
      }
      numericArray.push(parseFloat(pattern[i]));
    }

    if (isAmount) {
      pattern = numericArray;
    }

    this.patternProps = {
      type: isAmount ? 'amount' : 'measurement',
      pattern,
    };
  }

  calculateValues(elements) {
    const length = this.patternProps.pattern.length;
    const values = [];
    for (let i = 0; i < elements.length; i++) {
      values.push(this.patternProps.pattern[i % length]);
    }
    return values;
  }

  resize(fraction) {
    if (this.patternProps.type !== 'amount') {
      return `${conf.preface}(${this.patternProps.pattern.join()})`;
    }

    const toReturn = [];
    for (let i = 0; i < this.patternProps.pattern.length; i++) {
      toReturn.push(fraction * this.patternProps.pattern[i]);
    }
    return `${conf.preface}(${toReturn.join()})`;
  }
}
