import PDV from '../index';
const path = 'path.to.attr';
test('Pattern 01. Test calculateValues for valid measurement pattern', () => {
  const expressionParams = {
    dynamicType: 'pattern',
    value: '@pattern(20px, 30%, 15em)',
    path: path,
  };
  const pattern = new PDV.Handler(expressionParams);
  const values = pattern.calculateValues([0, 1, 2, 3, 4]);
  expect(values).toEqual(['20px', '30%', '15em', '20px', '30%']);
});

test('Pattern 02. Test calculateValues for valid amount pattern', () => {
  const expressionParams = {
    dynamicType: 'pattern',
    value: '@pattern(20, 30, 15)',
    path: path,
  };
  const pattern = new PDV.Handler(expressionParams);
  const values = pattern.calculateValues([0, 1, 2, 3, 4]);
  expect(values).toEqual([20, 30, 15, 20, 30]);
});

test('Pattern 03. Resize valid amount pattern', () => {
  const expressionParams = {
    dynamicType: 'pattern',
    value: '@pattern(20, 30 , 15)',
    path: path,
  };
  const pattern = new PDV.Handler(expressionParams);
  const resized = pattern.resize(0.5);
  expect(resized).toBe(`${PDV.preface}(10,15,7.5)`);
});

test('Pattern 04. Resize valid measurement pattern', () => {
  const expressionParams = {
    dynamicType: 'pattern',
    value: '@pattern(20px, 30px, 15px)',
    path: path,
  };
  const pattern = new PDV.Handler(expressionParams);
  const resized = pattern.resize(0.5);
  expect(resized).toBe(`${PDV.preface}(20px,30px,15px)`);
});

test('Pattern 05. Check invalid pattern expression', () => {
  const expr = '@patern(20, 40)';
  let errors = '';
  function logError(txt) {
    errors = txt;
  }
  const res = PDV.validation(expr, logError);
  expect(res).toBe(false);
  expect(errors).toBe(`The ${PDV.preface} expression is not valid`);
});
