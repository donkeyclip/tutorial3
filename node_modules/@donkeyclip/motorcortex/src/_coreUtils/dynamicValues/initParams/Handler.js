/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { getFromNameSpace } from '../../proxies/nameSpaceHandler/nameSpaceHandler';
import { dynamicValuesTerms } from '../../../_configuration/generalConf';
import { parse } from '../../templateEngine/parser';

export default class InitParams {
  constructor(expressionProps) {
    this.expressionProps = {
      expression: expressionProps.value,
    };
  }

  calculateValues(elements, initParams) {
    const totalElements = elements.length;
    const parserArgs = {
      [dynamicValuesTerms.totalElements]: totalElements,
      [dynamicValuesTerms.initParams]: initParams,
    };

    const path = this.expressionProps.expression.substring(
      this.expressionProps.expression.indexOf('.') + 1,
    );

    const toReturn = [];
    for (let i = 0; i < elements.length; i++) {
      parserArgs[dynamicValuesTerms.elementIndex] = i;
      const itemPath = path.replaceAll(/\[(.*?)\]/g, (str) => {
        const removedBrackets = str.substring(1, str.length - 1);
        return parse(`[{{${removedBrackets}}}]`, { items: parserArgs });
      });
      const initParam = getFromNameSpace(itemPath, '', initParams);
      toReturn.push(initParam);
    }

    return toReturn;
  }
}
