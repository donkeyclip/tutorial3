import EDV from '../index';
import { validateExpression } from '../_helpers';
import { dynamicValuesTerms } from '../../../../_configuration/generalConf';
import conf from '../conf';
import HTMLClip from '../../../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import DI from '../../../../DescriptiveIncidents/DescriptiveIncident';
import DG from '../../../../DescriptiveIncidents/DescriptiveGroup';
import { AudioPlayback } from '../../../../main';

function nthObjElement(obj, index) {
  return obj[Object.keys(obj)[index]];
}

const pathToAttr = 'path.to.attr';

function logError(txt) {
  return txt;
}

test('Math 01. Test validateExpression on valid expression without index and total', () => {
  const expression = '@expression(3*2 + (9+cos(12)))';
  const res = EDV.validation(expression, logError);
  expect(res).toBe(true);
});

test('Math 02. Test validateExpression on valid expression including index and total', () => {
  const expression = '@expression(index*2 + (9+cos(total)))';
  const res = validateExpression(expression);
  expect(res.result).toBe(true);
  expect(res.unit).toBe('');
  expect(res.expression).toBe('(index*2+(9+cos(total)))');
});

test('Math 03. Test validateExpression on valid expression without index and total with units', () => {
  const expression = '@expression(3*2+(9+cos(12)))deg';
  const res = validateExpression(expression);
  expect(res.result).toBe(true);
  expect(res.unit).toBe('deg');
  expect(res.expression).toBe('(3*2+(9+cos(12)))');
});

test('Math 04. Test calculateValues for valid expression not containing index and total', () => {
  const expressionParams = {
    dynamicType: 'expression',
    path: pathToAttr,
    value: '@expression(14*2+12)deg',
  };
  const math = new EDV.Handler(expressionParams);
  const values = math.calculateValues([0, 1, 2]);
  expect(values).toEqual(['40deg', '40deg', '40deg']);
});

test('Math 05. Test calculateValues for valid expression containing index and total', () => {
  const expressionParams = {
    dynamicType: 'expression',
    value: `@expression(14*${dynamicValuesTerms.elementIndex}+${dynamicValuesTerms.totalElements})deg`,
    path: pathToAttr,
  };
  const math = new EDV.Handler(expressionParams);
  const values = math.calculateValues([0, 1, 2]);
  expect(values).toEqual(['3deg', '17deg', '31deg']);
});

test('Math 06. Test calculateValues for invalid expression', () => {
  const expressionParams = {
    dynamicType: 'expression',
    value: `@expression(14*${dynamicValuesTerms.elementIndexs}+${dynamicValuesTerms.totalElements})`,
    path: pathToAttr,
  };
  const math = new EDV.Handler(expressionParams);
  const values = math.calculateValues([0, 1, 2]);
  expect(values).toEqual([0, 0, 0]);
});

test('Math 07. Resize expression', () => {
  const expressionParams = {
    dynamicType: 'expression',
    value: `@expression(14*${dynamicValuesTerms.elementIndex}+${dynamicValuesTerms.totalElements})deg`,
    path: pathToAttr,
  };
  const math = new EDV.Handler(expressionParams);
  const resizedExpression = math.resize(0.5);
  expect(resizedExpression).toBe(`${conf.preface}(((14*index+total)*0.5))deg`);
});

test('Math 08. initParams test', () => {
  const expressionParams = {
    dynamicType: 'expression',
    value: `@expression(3+${dynamicValuesTerms.initParams}.x.y)deg`,
    path: pathToAttr,
  };
  const math = new EDV.Handler(expressionParams);
  const values = math.calculateValues([0], { x: { y: 3 } });
  expect(values).toEqual(['6deg']);
});
//
// helper function that returns a clip given the initParams
function createClip(initParams) {
  return new HTMLClip({
    html: `
			<div id="my-root-div">
				<div class="a">Test</div>
			</div>`,
    css: () => `
      #my-root-div {
          width: 800px;
          height: 400px;
      }
    `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
    audioSources: [
      {
        src: './my.mp3',
        id: 'my-mp3',
        base64: false,
      },
    ],
    initParams,
    containerParams: {
      width: '500px',
      height: '500px',
    },
  });
}

test('Math 09. Integration test of initParams on @expression', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;

  const myClip = createClip({
    one: 1,
    two: 2,
    obj: {
      three: 3,
      four: 'four',
    },
  });

  const di = new DI(
    {
      animatedAttrs: {
        a: '@expression(initParams.two*2)px',
        b: '@expression(initParams.one + 1)%',
        c: '@expression(initParams.obj.three*2)px',
        d: "@expression(initParams.obj.four + '_' + 'test')",
      },
    },
    {
      duration: '@expression(initParams.two*200)',
      selector: '.a',
    },
  );
  const group = new DG();
  group.addIncident(di, 0);
  const res = myClip.addIncident(group, 0);
  expect(res.result).toBe(true);
  const realGroup = nthObjElement(myClip.realClip.children, 0).leaf;
  const elSplitterChild = nthObjElement(realGroup.children, 0).leaf;
  const attrSplitterChild = nthObjElement(elSplitterChild.children, 0).leaf;

  const expectations = [
    {
      duration: 400,
      animatedAttributeValue: '4px',
    },
    {
      duration: 400,
      animatedAttributeValue: '2%',
    },
    {
      duration: 400,
      animatedAttributeValue: '6px',
    },
    {
      duration: 400,
      animatedAttributeValue: 'four_test',
    },
  ];
  // debugger
  for (let i = 0; i < expectations.length; i++) {
    const monoIncident = nthObjElement(attrSplitterChild.children, i).leaf;
    expect(monoIncident.duration).toBe(expectations[i].duration);
    expect(monoIncident.animatedAttributeValue).toBe(
      expectations[i].animatedAttributeValue,
    );
  }
});

test('Math 10. Integration test of initParams on @expression on audio playback incident', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;

  const myClip = createClip({
    duration: 1000,
  });

  const ap = new AudioPlayback({
    selector: '~#my-mp3',
    duration: '@expression(initParams.duration)',
  });

  const res = myClip.addIncident(ap, 0);
  expect(res.result).toBe(true);
  const audioClip = nthObjElement(myClip.audioClip.children, 0).leaf;
  const playbackMono = nthObjElement(audioClip.children, 0).leaf;
  expect(playbackMono.duration).toBe(1000);
  expect(playbackMono.props.duration).toBe(1000);
});
