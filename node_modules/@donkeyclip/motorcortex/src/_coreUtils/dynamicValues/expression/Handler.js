/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { dynamicValuesTerms } from '../../../_configuration/generalConf';
import conf from './conf';
const preface = conf.preface;
import helper, { isNumeric } from '../../helper';
import { parse } from '../../templateEngine/parser';
import { dynamicExpressionsRegexp } from '../../templateEngine/regexp';
import { validateExpression } from './_helpers';

export default class Handler {
  constructor(expressionProps) {
    const validity = validateExpression(expressionProps.value);
    this.expressionProps = {
      unit: validity.unit,
      expression: validity.expression,
    };
  }

  /* resizes the stagger to the given fraction */
  resize(fraction) {
    let expression = validateExpression(this.expressionProps.expression);
    const mathExpression = `(${expression.expression}*${fraction})`;
    return `${preface}(${mathExpression})${this.expressionProps.unit}`;
  }

  /**
   * the initParams is the initParams that the Clip accepts on its creation
   * and stores on its context, on the key initParams
   **/
  calculateValues(elements, initParams) {
    const totalElements = elements.length;
    const values = [];
    const parserArgs = {
      [dynamicValuesTerms.totalElements]: totalElements,
      [dynamicValuesTerms.initParams]: initParams,
    };

    for (let i = 0; i < totalElements; i++) {
      parserArgs[dynamicValuesTerms.elementIndex] = i;

      const removedParenthesis = this.expressionProps.expression.substring(
        1,
        this.expressionProps.expression.length - 1,
      );
      const parsedString = parse(`{{${removedParenthesis}}}`, {
        items: parserArgs,
      });
      // if the returned string is still a dynamic expression that means it can't fully parsed
      if (parsedString.match(dynamicExpressionsRegexp) !== null) {
        helper.error(
          `${this.expressionProps.expression} can not fully parsed. At least one of the provided parameters seem not to be valid. Returning 0`,
        );
        values.push(0);
        continue;
      }
      const finalValue = `${parsedString}${this.expressionProps.unit}`;
      values.push(isNumeric(finalValue) ? finalValue * 1 : finalValue);
    }

    return values;
  }
}
