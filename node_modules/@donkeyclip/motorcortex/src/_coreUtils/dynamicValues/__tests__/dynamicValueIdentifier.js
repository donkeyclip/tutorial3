/* eslint-disable sonarjs/no-duplicate-string */
import { identifyDynamicValues } from '../dynamicValueIdentifier';
import SDV from '../stagger/index';
import ADV from '../attribute/index';
import EDV from '../expression/index';
import PDV from '../pattern/index';
import IPDV from '../initParams/index';

test('DVI01. Get an empty array for data not containing dynamic values', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'test2',
      test3: {
        test31: 'test31',
      },
    },
    test02: [],
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([]);
});

test('DVI02. Catch measurement and amount type stagger with full parametrization', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'test2',
      test3: {
        test31: '  @stagger ( 100px, 300px, 0.5, elastic, omni, true ) ',
      },
      test_ar: [
        {
          alpha: '  @stagger ( 120%, 30%, 0.3, linear, linear, false ) ',
        },
        '  @stagger ( 100, 300, 0.5, elastic ) ',
      ],
    },
    test02: [],
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([
    {
      dynamicType: 'stagger',
      path: 'test.test3.test31',
      value: '@stagger ( 100px, 300px, 0.5, elastic, omni, true )',
      Handler: SDV.Handler,
    },
    {
      dynamicType: 'stagger',
      path: 'test.test_ar.0.alpha',
      value: '@stagger ( 120%, 30%, 0.3, linear, linear, false )',
      Handler: SDV.Handler,
    },
    {
      dynamicType: 'stagger',
      path: 'test.test_ar.1',
      value: '@stagger ( 100, 300, 0.5, elastic )',
      Handler: SDV.Handler,
    },
  ]);
});

test('DVI03. Catch measurement and amount type attribute', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'test2',
      test3: {
        test31: '  @attribute(data-test31) ',
      },
      test_ar: [
        {
          alpha: '  @attribute(data-alpha) ',
        },
        '  @attribute(data-one) ',
      ],
    },
    test02: [],
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([
    {
      dynamicType: 'attribute',
      path: 'test.test3.test31',
      value: '@attribute(data-test31)',
      Handler: ADV.Handler,
    },
    {
      dynamicType: 'attribute',
      path: 'test.test_ar.0.alpha',
      value: '@attribute(data-alpha)',
      Handler: ADV.Handler,
    },
    {
      dynamicType: 'attribute',
      path: 'test.test_ar.1',
      value: '@attribute(data-one)',
      Handler: ADV.Handler,
    },
  ]);
});

test('DVI04. Catch measurement and amount type math', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'test2',
      test3: {
        test31: '  @expression(100 + index*20)px  ',
      },
      test_ar: [
        {
          alpha: '  @expression(index+total/2)px ',
        },
        '  @expression(random(1,3)) ',
      ],
    },
    test02: [],
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([
    {
      dynamicType: 'expression',
      path: 'test.test3.test31',
      value: '@expression(100 + index*20)px',
      Handler: EDV.Handler,
    },
    {
      dynamicType: 'expression',
      path: 'test.test_ar.0.alpha',
      value: '@expression(index+total/2)px',
      Handler: EDV.Handler,
    },
    {
      dynamicType: 'expression',
      path: 'test.test_ar.1',
      value: '@expression(random(1,3))',
      Handler: EDV.Handler,
    },
  ]);
});

test('DVI05. Catch measurement and amount type pattern', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'test2',
      test3: {
        test31: '  @pattern(20px, 50%, 15em)  ',
      },
      test_ar: [
        {
          alpha: '  @pattern(1, 1.5, 66, 0) ',
        },
        '  @pattern(20px, 55) ',
      ],
    },
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([
    {
      dynamicType: 'pattern',
      path: 'test.test3.test31',
      value: '@pattern(20px, 50%, 15em)',
      Handler: PDV.Handler,
    },
    {
      dynamicType: 'pattern',
      path: 'test.test_ar.0.alpha',
      value: '@pattern(1, 1.5, 66, 0)',
      Handler: PDV.Handler,
    },
    {
      dynamicType: 'pattern',
      path: 'test.test_ar.1',
      value: '@pattern(20px, 55)',
      Handler: PDV.Handler,
    },
  ]);
});

test('DVI06. Catch type @initParams', () => {
  const data = {
    test: {
      test1: 'test1',
      test2: 'initParams.z',
      test3: {
        test31: '@initParams.x ',
      },
      test_ar: [
        {
          alpha: '  @initParams.b.c ',
        },
        '  @initParams.y ',
      ],
    },
    test02: [],
  };
  const res = identifyDynamicValues(data);
  expect(res).toEqual([
    {
      dynamicType: 'initParams',
      path: 'test.test3.test31',
      value: '@initParams.x',
      Handler: IPDV.Handler,
    },
    {
      dynamicType: 'initParams',
      path: 'test.test_ar.0.alpha',
      value: '@initParams.b.c',
      Handler: IPDV.Handler,
    },
    {
      dynamicType: 'initParams',
      path: 'test.test_ar.1',
      value: '@initParams.y',
      Handler: IPDV.Handler,
    },
  ]);
});
