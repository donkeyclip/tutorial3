/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

/* eslint-disable sonarjs/no-duplicate-string */
import Validator from 'fastest-validator';
import { hasOwnProp, numberPartRegexp } from '../helper';
const intRegexp = new RegExp(/^[-+]?\d+$/);

export const validator = new Validator({
  messages: {
    color: "The '{field}' field must be an a valid color! Actual: {actual}",
    measurement:
      "The '{field}' must be a measurement with specs that are not met. You've either provided wrong value/units or an invalid @ expression. Actual: {actual}",
    measurementNotAString:
      'measurement - The provided value of {field} is not a string',
    measurementMin:
      "measurement - The provided value of {field} ({actual}) is smaller than the schema's min",
    measurementMax:
      "measurement - The provided value of {field} ({actual}) is bigger than the schema's max",
    measurementInt:
      'measurement - The provided value of {field} ({actual}) is not an integer',
  },
  useNewCustomCheckerFunction: true,
});

// eslint-disable-next-line no-unused-vars
validator.add('html', function html({ messages }, path, context) {
  return {
    source: `
      if(value === null){
        ${this.makeError({ type: 'html', actual: 'value', messages })}
      } else {
        return value;
      }
    `,
  };
});

// eslint-disable-next-line no-unused-vars
validator.add('css', function css({ messages }, path, context) {
  return {
    source: `
      if(value === null){
        ${this.makeError({ type: 'css', actual: 'value', messages })}
      } else {
        return value;
      }
    `,
  };
});

validator.add(
  'measurement',
  // eslint-disable-next-line no-unused-vars
  function measurement({ schema, messages }, path, context) {
    const measurementRegexp = new RegExp(
      '^[+-]?(\\d+([.]\\d*)?|[.]\\d+)(' + schema.units.join('|') + ')$',
      'gi',
    );

    return {
      source: `
      const validUnits = ['${schema.units.join("','")}'];

      if(typeof value !== 'string' && !(value instanceof String)){
        ${this.makeError({
          type: 'measurementNotAString',
          actual: 'value',
          messages,
        })}
        return ;
      }

      if(!value.match(${measurementRegexp})){
        ${this.makeError({ type: 'measurement', actual: 'value', messages })}
      } else {
        var numberPart = value.match(${numberPartRegexp})[0];
        if(${hasOwnProp(schema, 'min')}){
          if(${schema.min} > numberPart){
            ${this.makeError({
              type: 'measurementMin',
              actual: 'value',
              messages,
            })}
          }
        }
        if(${hasOwnProp(schema, 'max')}){
          if(${schema.max} < numberPart){
            ${this.makeError({
              type: 'measurementMax',
              actual: 'value',
              messages,
            })}
          }
        }
         if(${hasOwnProp(schema, 'integer')}){
          if(!numberPart.match(${intRegexp})){
            ${this.makeError({
              type: 'measurementInt',
              actual: 'value',
              messages,
            })}
          }
        }
      }
      return value;
    `,
    };
  },
);

// eslint-disable-next-line no-unused-vars
validator.add('color', function color({ messages }, path, context) {
  return {
    source: `
    if(typeof value !== 'string' && !(value instanceof String)){
      ${this.makeError({ type: 'measurement', actual: 'value', messages })}
      return ;
    }
    var option;
    function isColor(strColor) {
      if (!option ) {
        option = new Option().style;
      }
      option.color = strColor;
      const res = option.color !== '';
      option.color = '';
      return res;
    }
    if(!isColor(value)){
      ${this.makeError({ type: 'color', actual: 'value', messages })}
    }
    return value;
    `,
  };
});

// keep amount for backwards compatibility
validator.alias('amount', { type: 'number' });
