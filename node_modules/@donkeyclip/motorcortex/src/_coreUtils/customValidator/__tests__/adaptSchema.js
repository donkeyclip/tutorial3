import SchemaAdaptor from '../SchemaAdaptor';

test(`AS.0 Simple case with no objects nor arrays`, () => {
  const schema = {
    string: {
      type: 'string',
      optional: false,
    },
    num: {
      type: 'number',
      min: 1000,
    },
  };

  const adaptor = new SchemaAdaptor(schema);
  const adapted = adaptor.adaptSchema();
  expect(adapted.exportFlattened()).toEqual({
    string: [
      {
        type: 'string',
        optional: false,
      },
      {
        type: 'custom',
        optional: false,
        check: expect.anything(),
      },
    ],
    num: [
      {
        type: 'number',
        min: 1000,
      },
      {
        type: 'custom',
        optional: true,
        check: expect.anything(),
      },
    ],
  });
});

test(`AS.1 A case with 2-level depth objects and arrays`, () => {
  const schema = {
    string: {
      type: 'string',
    },
    obj: {
      type: 'object',
      props: {
        _obj: {
          type: 'object',
          props: {
            __string: {
              type: 'string',
            },
          },
        },
      },
    },
    arr: {
      type: 'array',
      items: {
        type: 'array',
        optional: false,
        items: {
          type: 'string',
        },
      },
    },
  };
  const adapter = new SchemaAdaptor(schema);
  const adapted = adapter.adaptSchema();
  expect(adapted.exportFlattened()).toEqual({
    string: [
      {
        type: 'string',
      },
      {
        type: 'custom',
        check: expect.anything(),
        optional: true,
      },
    ],
    obj: [
      {
        type: 'object',
        props: {
          _obj: [
            {
              type: 'object',
              props: {
                __string: [
                  {
                    type: 'string',
                  },
                  {
                    type: 'custom',
                    check: expect.anything(),
                    optional: true,
                  },
                ],
              },
            },
            {
              type: 'custom',
              check: expect.anything(),
              optional: true,
            },
          ],
        },
      },
      {
        type: 'custom',
        check: expect.anything(),
        optional: true,
      },
    ],
    arr: [
      {
        type: 'array',
        items: [
          {
            type: 'array',
            optional: false,
            items: [
              {
                type: 'string',
              },
              {
                type: 'custom',
                optional: true,
                check: expect.anything(),
              },
            ],
          },
          {
            type: 'custom',
            optional: false,
            check: expect.anything(),
          },
        ],
      },
      {
        type: 'custom',
        optional: true,
        check: expect.anything(),
      },
    ],
  });
});
