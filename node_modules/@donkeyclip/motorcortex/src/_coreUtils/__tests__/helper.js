import { validateObject } from '../customValidator/_helpers';
import {
  assignValueToPath,
  hasOwnProp,
  htmlEscape,
  sortByIndexes,
  validateGoogleFontUrl,
} from '../helper';

const testObj = {
  path: {
    to: {
      key: 4,
    },
  },
  firstLevelPath: 5,
};

test('HP 01. assignValueToPath should return false if path is not presnet', () => {
  const res = assignValueToPath(testObj, 'path.wrong.key', 3);
  expect(res).toBe(false);
  expect(testObj).toEqual({
    path: {
      to: {
        key: 4,
      },
    },
    firstLevelPath: 5,
  });
});

test('HP 02. assignValueToPath should alter value and return true if path is presnet', () => {
  const res = assignValueToPath(testObj, 'path.to.key', 3);
  expect(res).toBe(true);
  expect(testObj).toEqual({
    path: {
      to: {
        key: 3,
      },
    },
    firstLevelPath: 5,
  });
});

test('HP 03. (First level path) assignValueToPath should return false if path is not presnet', () => {
  const res = assignValueToPath(testObj, 'wrong', 3);
  expect(res).toBe(false);
  expect(testObj).toEqual({
    path: {
      to: {
        key: 3,
      },
    },
    firstLevelPath: 5,
  });
});

test('HP 04. (First level path) assignValueToPath should alter value and return true if path is presnet', () => {
  const res = assignValueToPath(testObj, 'firstLevelPath', 3);
  expect(res).toBe(true);
  expect(testObj).toEqual({
    path: {
      to: {
        key: 3,
      },
    },
    firstLevelPath: 3,
  });
});

test('HP 05. Test sortByIndexes', () => {
  const collection = [
    {
      ms: 4,
    },
    {
      ms: 1,
    },
    {
      ms: 9,
    },
    {
      ms: 12,
    },
  ];
  const res = sortByIndexes(collection, 'ms');
  expect(res).toEqual([1, 0, 2, 3]);
});

test('HP 06. Test sortByIndexes', () => {
  const collection = [
    { millisecond: 2000, id: 'test-incident-1_my-class-1_alpha' },
    { millisecond: 5000, id: 'test-incident-2_my-class-1_alpha' },
    { millisecond: 4000, id: 'test-incident-3_my-class-1_alpha' },
  ];
  const res = sortByIndexes(collection, 'millisecond');
  expect(res).toEqual([0, 2, 1]);
});

test('HP 07. Test hasOwnProp with valid arguments', () => {
  const res = hasOwnProp({ x: 12 }, 'x');
  expect(res).toBe(true);
});

test('HP 08. Test hasOwnProp with invalid object', () => {
  const res = hasOwnProp(4, 'x');
  expect(res).toBe(false);
});

test('HP 09. Test hasOwnProp with invalid prop', () => {
  const res = hasOwnProp({ x: 12 }, 'y');
  expect(res).toBe(false);
});

test('HP 10. Test hasOwnProp with null prop', () => {
  const res = hasOwnProp({ x: 12 });
  expect(res).toBe(false);
});

test(`HP 10. Test securityTools.validateGoogleFontUrl`, () => {
  const tests = [
    {
      url: 'https://fonts.googleapis.com/css?family=Tangerine:bold,bolditalic|Inconsolata:italic|Droid+Sans',
      expected: true,
    },
    {
      url: ' https://fonts.googleapis.com/css?family=Tangerine:bold,bolditalic|Inconsolata:italic|Droid+Sans ',
      expected: true,
    },
    {
      url: 'http://fonts.googleapis.com/css?family=Tangerine:bold,bolditalic|Inconsolata:italic|Droid+Sans',
      expected: false,
    },
  ];

  for (let i = 0; i < tests.length; i++) {
    const res = validateGoogleFontUrl(tests[i].url);
    expect(res).toBe(tests[i].expected);
  }
});

test(`HP 11. validateObject with invalid schema`, () => {
  const res = validateObject(null, {}, 'Error on initParams validation');
  expect(res.result).toBe(false);
  expect(res.errors[0]).toBe(
    'Error on initParams validation. Invalid schema provided',
  );
});

test(`HP 12. Success validateObject with valid schema`, () => {
  const schema = {
    id: { type: 'number', positive: true, integer: true },
    name: { type: 'string', min: 3, max: 255 },
    status: 'boolean', // short-hand def
  };

  const res = validateObject(schema, { id: 5, name: 'John', status: true });
  expect(res.result).toBe(true);
});

test(`HP 13. Success validateObject with valid schema but invalid props`, () => {
  const schema = {
    id: { type: 'number', positive: true, integer: true },
    name: { type: 'string', min: 3, max: 255 },
    status: 'boolean', // short-hand def
  };

  const res = validateObject(schema, { id: 2, name: 'Adam' });
  expect(res.result).toBe(false);
  expect(res.errors.length).toBe(1);
});

test(`HP 14. HTML escape`, () => {
  const myString = `<script src="https://something.com/a.js"></script>`;
  const res = htmlEscape(myString);
  expect(res).toBe(
    `&lt;script src=&quot;https:&#x2F;&#x2F;something.com&#x2F;a.js&quot;&gt;&lt;&#x2F;script&gt;`,
  );
});
