import HTMLDescriptiveClip from '../../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import ExtendableCSSEffect from '../ExtendableCSSEffect/ExtendableCSSEffect';
import { setCore, CSSEffect } from '../CSSLayer';

test('expect changing the CSS Core to get applied successfully', () => {
  const progressA = [];
  const progressB = [];

  class MyCSSEffect extends ExtendableCSSEffect {
    onProgress(t) {
      progressA.push(this.getFraction(t));
    }
  }

  class MySecondCSSEffect extends ExtendableCSSEffect {
    onProgress(t) {
      progressB.push(this.getFraction(t));
    }
  }

  document.body.innerHTML = `<div id="clip-container"></div>`;

  const rootClip = new HTMLDescriptiveClip({
    html: `
      <div id="my-root-div">
        <div class="a"></div>
      </div>
    `,
    css: `
      #my-root-div {
          width: 800px;
          height: 400px;
      }
      .a {
        width: 50px;
        height: 50px;
        background: red;
      }
    `,
    host: document.querySelector('#clip-container'),
    id: 'root-clip',
    containerParams: {
      width: '500px',
      height: '500px',
    },
  });

  setCore(MyCSSEffect);

  const effect = new CSSEffect(
    {
      animatedAttrs: {
        width: '60px',
        height: '40px',
      },
    },
    {
      selector: '.a',
      duration: 1000,
    },
  );

  const res = rootClip.addIncident(effect, 0);
  expect(res.result).toBe(true);

  rootClip.playableProgress(500 / rootClip.duration, 500);
  expect(progressA).toEqual([0, 0, 0.5, 0.5]);

  setCore(MySecondCSSEffect);
  rootClip.removeIncident(effect);
  const secondffect = new CSSEffect(
    {
      animatedAttrs: {
        left: '300px',
      },
    },
    {
      selector: '.a',
      duration: 1000,
    },
  );
  const res2 = rootClip.addIncident(secondffect, 0);
  expect(res2.result).toBe(true);
  rootClip.playableProgress(500 / rootClip.duration, 500);
  expect(progressB).toEqual([0.5, 0.5]);
});
