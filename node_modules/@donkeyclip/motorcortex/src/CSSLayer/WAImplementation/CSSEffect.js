/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import ExtendableCSSEffect from '../ExtendableCSSEffect/ExtendableCSSEffect';
import { doNothing, hasOwnProp } from '../../_coreUtils/helper';

export default class CSSEffect extends ExtendableCSSEffect {
  onGetContext() {
    this.context.CSSAnimationLayer ??= {};
    this.context.CSSAnimationLayer[this.element.dataset.motorcortex2Id] ??= {};
    this.context.CSSAnimationLayer[this.element.dataset.motorcortex2Id][
      this.attributeKey
    ] ??= { id: null, animation: { cancel: doNothing } };
    this.CSSAnimationLayerElement =
      this.context.CSSAnimationLayer[this.element.dataset.motorcortex2Id][
        this.attributeKey
      ];
    this._init();
  }

  _init() {
    if (!hasOwnProp(this.compoAttributes, this.attributeKey)) {
      this.options = {
        [this.attributeKey]: [this.initialValue, this.targetValue],
      };
      return;
    }
    this.options = {
      transform: ['', ''],
    };
    for (const attr of this.compoAttributes[this.attributeKey]) {
      if (!hasOwnProp(this.targetValue, attr)) {
        continue;
      }
      this.options.transform[0] += `${[attr]}(${this.initialValue[attr] || 0})`;
      this.options.transform[1] += `${[attr]}(${this.targetValue[attr]})`;
    }
  }

  createAnimation() {
    /* create the new animation */
    this.animation = new Animation(
      new KeyframeEffect(
        this.element,
        [
          { [this.attributeKey]: this.options[this.attributeKey][0] },
          { [this.attributeKey]: this.options[this.attributeKey][1] },
        ],
        {
          duration: this.props.duration,
          fill: 'forwards',
          easing: 'linear',
        },
      ),
    );

    /* add the new animations info to the context */
    this.CSSAnimationLayerElement.id = this.id;
    this.CSSAnimationLayerElement.animation = this.animation;
  }

  onProgress(ms) {
    if (this.CSSAnimationLayerElement.id !== this.id) {
      // TODO investigate the effectiveness or not of this command on resources management
      // this.CSSAnimationLayerElement.animation.cancel();
      this.createAnimation();
    }

    this.animation.currentTime = ms;
  }
}
