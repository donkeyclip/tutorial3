/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

'use strict';

const degrees = Math.PI / 180;

// eslint-disable-next-line sonarjs/cognitive-complexity
function getMatrix2D(win, element) {
  const transform = win.getComputedStyle(element).transform;

  if (transform === '' || transform === 'none') {
    return {
      rotate: '0deg',
      rotateX: '0deg',
      rotateY: '0deg',
      scaleX: 1,
      scaleY: 1,
      scale: 1,
      skewX: '0deg',
      skewY: '0deg',
      translateX: '0px',
      translateY: '0px',
    };
  }

  // matrixValues holds a matrix() css function arguments list (6 in total).
  // See: https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()
  // matrixValues is actually an array (length 6), each index of which represents the corresponding
  // matrix() argument.
  const matrixValues = transform.split('(')[1].split(')')[0].split(',');

  // Starting from the 2d matrix values we now want to transform the data
  // to a much easier to use property set (scale, skew, etc). To do so we apply QR decomposition
  // https://en.wikipedia.org/wiki/QR_decomposition
  function qrDecompose(matrix) {
    const angle = Math.atan2(matrix[1], matrix[0]),
      denom = Math.pow(matrix[0], 2) + Math.pow(matrix[1], 2),
      denom2 = Math.pow(matrix[2], 2) + Math.pow(matrix[3], 2),
      scaleX = Math.round(Math.sqrt(denom) * 100) / 100,
      scaleY =
        Math.round(
          ((matrix[0] * matrix[3] - matrix[2] * matrix[1]) / scaleX) * 100 || 0,
        ) / 100,
      skewX = Math.atan2(matrix[0] * matrix[2] + matrix[1] * matrix[3], denom),
      skewY = Math.atan2(matrix[1] * matrix[3] + matrix[0] * matrix[2], denom2);

    return {
      rotate: `${angle / degrees || 0}deg`,
      // this is rotation angle in degrees
      scaleX:
        scaleX === scaleY
          ? 1
          : scaleX !== undefined && scaleX !== null
          ? scaleX
          : 1,
      // scaleX factor
      scaleY:
        scaleX === scaleY
          ? 1
          : scaleY !== undefined && scaleY !== null
          ? scaleY
          : 1,
      // scaleY factor
      scale: scaleX === scaleY && scaleX !== null ? scaleY : 1,
      skewX: `${denom === 1 ? skewX / degrees : 0}deg`,
      // skewX angle degrees
      skewY: `${denom2 === 1 ? skewY / degrees : 0}deg`,
      // skewY angle degrees
      translateX: `${matrix[4].trim()}px`,
      // translation point  x
      translateY: `${matrix[5].trim()}px`, // translation point  y
    };
  }

  return qrDecompose(matrixValues);
}

export default getMatrix2D;
