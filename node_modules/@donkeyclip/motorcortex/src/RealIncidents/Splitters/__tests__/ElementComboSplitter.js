import { CascadingHanlder } from '../ElementComboSplitter';
import DCb from '../../../DescriptiveIncidents/DescriptiveCombo';
import DI from '../../../DescriptiveIncidents/DescriptiveIncident';
// import AttributeChannel from '../../Channels/Attribute/AttributeChannel';

const stagger1_200 = '@stagger(1, 200)';

test(`ECS.01 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to props on first level Incident with no selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: 'test',
          },
          props: {
            dynamicValue: stagger1_200,
          },
        },
      ],
    },
  };
  const path = 'incidents.0.props.dynamicValue';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(true);
});

test(`ECS.02 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to props on first level Incident with selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: 'test',
          },
          props: {
            dynamicValue: stagger1_200,
            selector: 'test',
          },
        },
      ],
    },
  };
  const path = 'incidents.0.props.dynamicValue';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(false);
});

test(`ECS.03 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to attrs on first level Incident with no selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: 'test',
            beta: {
              gamma: {
                delta: '@stagger(0,100)',
              },
            },
          },
          props: {
            dynamicValue: stagger1_200,
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.beta.gamma.delta';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(true);
});

test(`ECS.04 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to attrs on first level Incident with selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            alpha: 'test',
            beta: {
              gamma: {
                delta: '@stagger(0,100)',
              },
            },
          },
          props: {
            dynamicValue: stagger1_200,
            selector: 'test',
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.beta.gamma.delta';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(false);
});

test(`ECS.05 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to props on sedond level Combo with no selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: 'test',
                },
                props: {
                  dynamicValue: stagger1_200,
                  // no selector
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            // no selector
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.incidents.0.props.dynamicValue';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(true);
});

test(`ECS.06 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to props on sedond level Combo with selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: 'test',
                },
                props: {
                  dynamicValue: stagger1_200,
                  selector: 'test',
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.incidents.0.props.dynamicValue';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(false);
});

test(`ECS.07 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to attrs on sedond level Combo with no selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                  // no selector
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            // no selector
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.incidents.0.attrs.alpha';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(true);
});

test(`ECS.08 Test CascadingHanlder.refersToOwnSelector with dynamic value
  applied to attrs on sedond level Combo with no selector`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                  selector: 'selector',
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            // no selector
          },
        },
      ],
    },
  };
  const path = 'incidents.0.attrs.incidents.0.attrs.alpha';

  const res = CascadingHanlder.refersToOwnSelector(di, path);
  expect(res).toBe(false);
});

test(`ECS.09 Selectors cascading test`, () => {
  const di = {
    attrs: {
      incidents: [
        {
          incidentClass: DI,
          attrs: {},
          props: {},
        },
        {
          incidentClass: DI,
          attrs: {},
          props: { selector: 'internal' },
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                  selector: 'selector',
                },
              },
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            // no selector
          },
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                  selector: 'selector',
                },
              },
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                },
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            selector: 'DCb-selector',
          },
        },
      ],
    },
  };
  const res = CascadingHanlder.cascadeSelectors(
    'rootSelector',
    di.attrs.incidents,
    'attrs.incidents',
  );
  expect(res).toEqual([
    { path: 'attrs.incidents.0.props.selector', value: 'rootSelector' },
    {
      path: 'attrs.incidents.1.props.selector',
      value: 'rootSelector internal',
    },
    { path: 'attrs.incidents.2.props.selector', value: 'rootSelector' },
    {
      path: 'attrs.incidents.2.attrs.incidents.0.props.selector',
      value: 'rootSelector selector',
    },
    {
      path: 'attrs.incidents.2.attrs.incidents.1.props.selector',
      value: 'rootSelector',
    },
    {
      path: 'attrs.incidents.3.props.selector',
      value: 'rootSelector DCb-selector',
    },
    {
      path: 'attrs.incidents.3.attrs.incidents.0.props.selector',
      value: 'rootSelector DCb-selector selector',
    },
    {
      path: 'attrs.incidents.3.attrs.incidents.1.props.selector',
      value: 'rootSelector DCb-selector',
    },
  ]);
});

const incidents_1_props_duration = 'incidents.1.props.duration';
const non_applying_simple_props = 'non-applying, simple props';
const simple_non_applying_attrs = 'simple non-applying attrs';
const incidents_0_attrs_animatedAttrs_width =
  'incidents.0.attrs.animatedAttrs.width';
const incidents_3_attrs_animatedAttrs_width =
  'incidents.3.attrs.animatedAttrs.width';
const incidents_2_attrs_incidents_0_props_duration =
  'incidents.2.attrs.incidents.0.props.duration';
const nested_non_applying_props = 'nested non-applying props';
const nested_non_applying_attrs = 'nested non-applying attrs';

test(`ECS.10 getStaggersForChild test`, () => {
  const dynamics = [
    // first a simple applying props dynamic
    {
      path: 'incidents.0.props.duration',
      stagger: null,
      meta: 'simple applying props',
    },
    // then a non-applying, simple props dynamic
    {
      path: incidents_1_props_duration,
      stagger: null,
      meta: non_applying_simple_props,
    },
    // a simple applying attrs dynamic
    {
      path: incidents_0_attrs_animatedAttrs_width,
      stagger: null,
      meta: 'simple applying attrs',
    },
    // a simple non-applying attrs dynamic
    {
      path: incidents_3_attrs_animatedAttrs_width,
      stagger: null,
      meta: simple_non_applying_attrs,
    },
    // a nested applying props dynamic
    {
      path: 'incidents.0.attrs.incidents.3.props.duration',
      stagger: null,
      meta: 'nested applying props',
    },
    // a nested non-applying props dynamic
    {
      path: incidents_2_attrs_incidents_0_props_duration,
      stagger: null,
      meta: nested_non_applying_props,
    },
    // a nested applying attrs dynamic
    {
      path: 'incidents.0.attrs.incidents.3.attrs.animatedAttrs.width',
      stagger: null,
      meta: 'nested applying attrs',
    },
    // a nested non-applying attrs dynamic
    {
      // eslint-disable-next-line sonarjs/no-duplicate-string
      path: 'incidents.2.attrs.incidents.0.attrs.animatedAttrs.width',
      stagger: null,
      meta: nested_non_applying_attrs,
    },
  ];

  const attrsRes = CascadingHanlder.getStaggersForChild(dynamics, 0, 'attrs');
  expect(attrsRes).toEqual({
    identifiedDynamics: [
      { path: 'animatedAttrs.width', stagger: null },
      { path: 'incidents.3.props.duration', stagger: null },
      { path: incidents_3_attrs_animatedAttrs_width, stagger: null },
    ],
    remainingDynamics: [
      {
        path: 'incidents.0.props.duration',
        stagger: null,
        meta: 'simple applying props',
      },
      {
        path: incidents_1_props_duration,
        stagger: null,
        meta: non_applying_simple_props,
      },
      {
        path: incidents_3_attrs_animatedAttrs_width,
        stagger: null,
        meta: simple_non_applying_attrs,
      },
      {
        path: incidents_2_attrs_incidents_0_props_duration,
        stagger: null,
        meta: nested_non_applying_props,
      },
      {
        path: 'incidents.2.attrs.incidents.0.attrs.animatedAttrs.width',
        stagger: null,
        meta: nested_non_applying_attrs,
      },
    ],
  });

  const propsRes = CascadingHanlder.getStaggersForChild(dynamics, 0, 'props');
  expect(propsRes).toEqual({
    identifiedDynamics: [{ path: 'duration', stagger: null }],
    remainingDynamics: [
      {
        path: incidents_1_props_duration,
        stagger: null,
        meta: non_applying_simple_props,
      },
      {
        path: incidents_0_attrs_animatedAttrs_width,
        stagger: null,
        meta: 'simple applying attrs',
      },
      {
        path: incidents_3_attrs_animatedAttrs_width,
        stagger: null,
        meta: simple_non_applying_attrs,
      },
      {
        path: 'incidents.0.attrs.incidents.3.props.duration',
        stagger: null,
        meta: 'nested applying props',
      },
      {
        path: incidents_2_attrs_incidents_0_props_duration,
        stagger: null,
        meta: nested_non_applying_props,
      },
      {
        path: 'incidents.0.attrs.incidents.3.attrs.animatedAttrs.width',
        stagger: null,
        meta: 'nested applying attrs',
      },
      {
        path: 'incidents.2.attrs.incidents.0.attrs.animatedAttrs.width',
        stagger: null,
        meta: nested_non_applying_attrs,
      },
    ],
  });
});

// test(`ECS.11 createDescriptiveIncidentLikeObject test`, ()=>{
//   const incident = {
//     incidentClass: DI,
//     attrs: {
//       width: '100px'
//     },
//     props: {
//       duration: '1000',
//       delay: '@stagger(0,100)',
//       selector: "my-selector"
//     }
//   }

//   const res = CascadingHanlder.createDescriptiveIncidentLikeObject(incident,
//                                                     {attributes: "staggers"}, {props: "staggers"});
//   expect(res).toEqual(
//     {
//       constructor: {
//         Incident: DI,
//         plugin_npm_name: 'motor-cortex-js-attribute',
//         Channel: AttributeChannel,
//         isClip: false
//       },
//       attrs: { width: '100px' },
//       props: {
//         duration: '1000',
//         delay: '@stagger(0,100)',
//         selector: 'my-selector'
//       },
//       selector: 'my-selector',
//       id: expect.anything(),
//       audioClip: null,
//       audio: 'no',
//       dynamicDurationValue: null,
//       putMessageOnPipe: expect.anything(),
//       attributesStaggers: { attributes: 'staggers' },
//       propsStaggers: { props: 'staggers' }
//     }
//   )
// });

test(`ECS.12 CascadingHanlder.createElementProxy test`, () => {
  const dcb = new DCb(
    {
      incidents: [
        {
          incidentClass: DI,
          attrs: {
            animatedAttrs: {
              width: '@stagger(0px, 1000px)',
            },
          },
          props: {},
          position: 0,
        },
        {
          incidentClass: DI,
          attrs: {},
          props: { selector: 'internal' },
          position: 0,
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@expression(index*100)',
                },
                props: {
                  dynamicValue: '@expression(100+index*100)',
                  selector: 'selector',
                },
                position: 100,
              },
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@dynamic',
                },
                props: {
                  dynamicValue: stagger1_200,
                },
                position: 100,
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            // no selector
          },
          position: 0,
        },
        {
          incidentClass: DCb,
          attrs: {
            incidents: [
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@expression(100*index)px',
                },
                props: {
                  dynamicValue: '@stagger(1, 2000)',
                  selector: 'selector',
                },
                position: 100,
              },
              {
                incidentClass: DI,
                attrs: {
                  alpha: '@expression(index*2)px',
                },
                props: {
                  dynamicValue: stagger1_200,
                },
                position: 100,
              },
            ],
          },
          props: {
            dynamicValue: 'whatever',
            selector: 'DCb-selector',
          },
          position: 1000,
        },
      ],
    },
    {
      delay: '@stagger(0, 1000)',
      hiatus: '@expression(100*index)',
      repeats: '@expression(1 + index)',
    },
  );

  const mock_staggerAttrs = [
    {
      path: incidents_0_attrs_animatedAttrs_width,
      values: ['0px', '100px'],
    },
    {
      path: 'incidents.2.attrs.incidents.0.attrs.aplha',
      values: ['0px', '200px'],
    },
    {
      path: 'incidents.2.attrs.incidents.0.props.dynamicValue',
      values: ['0px', 'dynamic_prop_2.0.dynamicValue'],
    },
    {
      path: 'incidents.2.attrs.incidents.1.attrs.aplha',
      values: ['0px', '300px'],
    },
    {
      path: 'incidents.2.attrs.incidents.1.props.dynamicValue',
      values: ['0px', 'dynamic_prop_2.1.dynamicValue'],
    },
    {
      path: 'incidents.3.attrs.incidents.0.attrs.aplha',
      values: ['0px', '400px'],
    },
    {
      path: 'incidents.3.attrs.incidents.0.props.dynamicValue',
      values: ['0px', 'dynamic_prop_3.0.dynamicValue'],
    },
    {
      path: 'incidents.3.attrs.incidents.1.attrs.aplha',
      values: ['0px', '500px'],
    },
    {
      path: 'incidents.3.attrs.incidents.1.props.dynamicValue',
      values: ['0px', 'dynamic_prop_3.1.dynamicValue'],
    },
  ];

  const mock_staggerProps = [
    {
      path: 'delay',
      values: [0, 100],
    },
    {
      path: 'hiatus',
      values: [100, 200],
    },
    {
      path: 'repeats',
      values: [0, 2],
    },
  ];

  const proxy = CascadingHanlder.createElementProxy(
    dcb,
    'rootSelector',
    1,
    mock_staggerAttrs,
    mock_staggerProps,
  );

  expect(proxy.attrs.incidents[0].attrs.animatedAttrs.width).toBe('100px');
  expect(dcb.attrs.incidents[0].attrs.animatedAttrs.width).toBe(
    '@stagger(0px, 1000px)',
  );

  dcb.attrs.incidents[0].attrs.animatedAttrs.width = '200px';
  expect(proxy.attrs.incidents[0].attrs.animatedAttrs.width).toBe('100px');
  expect(dcb.attrs.incidents[0].attrs.animatedAttrs.width).toBe('200px');
});

test(`ECS.13 CascadingHanlder.getRepeatPositiont test`, () => {
  expect(CascadingHanlder.getRepeatPosition(100, 40, 1000, 0)).toBe(100);
  expect(CascadingHanlder.getRepeatPosition(100, 40, 1000, 1)).toBe(1240);
});
