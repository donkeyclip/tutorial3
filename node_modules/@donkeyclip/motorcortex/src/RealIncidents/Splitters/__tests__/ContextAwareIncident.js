/* eslint-disable sonarjs/no-duplicate-string */
import MonoIncident from '../../MonoIncident';
import Channel from '../../../Channels/Channel';
import MCDI from '../../../DescriptiveIncidents/DescriptiveIncident';
import * as MotorCortex from '../../../main';
import ContextAwareClipIncident from '../ContextAwareClipIncident';
import ContextAwareIncident from '../ContextAwareIncident';

const constructionIngredients = {
  incidentId: 'incident-id',
  attrs: {
    animatedAttrs: {
      alpha: 1.1,
    },
  },
  props: {
    selector: 'an-mcid-targeting-selector',
  },
  Incident: MonoIncident,
  plugin_npm_name: 'my_test_plugin',
  Channel,
};

const contextData = {
  clipId: 'my-test-clip-id',
  context: {},
};

const cai = new ContextAwareIncident(
  constructionIngredients,
  contextData,
  'my-mcid',
  'alpha',
);

test(`ContextAwareIncident should initialise by creating an Incident and
            assigning it to the original context key`, () => {
  expect(cai.id).toEqual('incident-id_my-mcid_alpha');
  expect(Object.keys(cai.contexts).length).toEqual(1);
  expect(cai.contexts['my-test-clip-id'].constructor).toEqual(MonoIncident);
  expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
  expect(cai.contexts['my-test-clip-id'].attrs).toEqual(
    constructionIngredients.attrs,
  );
});

test(`ContextAwareIncident should create one key-value pair on on its
            contexts map, per new context added to it`, () => {
  cai.setInitialValue({
    final: true,
    value: '3',
  });
  cai.addContext({
    clipId: 'my-second-clip-id',
    context: {},
  });

  expect(Object.keys(cai.contexts).length).toEqual(2);
  expect(cai.contexts['my-second-clip-id'].constructor).toEqual(MonoIncident);
  expect(cai.originalContext).toEqual(cai.contexts['my-test-clip-id']);
  expect(cai.contexts['my-second-clip-id'].attrs).toEqual(
    constructionIngredients.attrs,
  );
});

test(`ContexAwareClipIncident timeScale test`, () => {
  class MyPluginCASI extends MotorCortex.HTMLClip {
    // natural duration: 4000ms
    get html() {
      return `<div>
      <div class="a"></div>
    </div>`;
    }

    get css() {
      return `div{width:40px; height:40px;}`;
    }

    buildTree() {
      const myIncident = new MCDI(
        {
          animatedAttrs: {
            test: 200,
          },
        },
        {
          duration: 2000,
          selector: '.a',
        },
      );
      this.addIncident(myIncident, 2000);
    }
  }

  /** ************************* PLUGIN LOADING ************************** */
  /** ******************************************************************* */
  const testPlugin0 = {
    npm_name: '@donkeyclip/test-plugin-0',
    name: 'Test Plugin 0',
    incidents: [
      {
        exportable: MyPluginCASI,
        name: 'MPCASI',
      },
    ],
  };

  const TestPlugin = MotorCortex.loadPlugin(testPlugin0);
  const animationProps = {
    selector: '.a',
  };
  const animation = new TestPlugin.MPCASI({
    ...animationProps,
    duration: 2000,
  });
  const noDurationAnimation = new TestPlugin.MPCASI({ ...animationProps });

  expect(animation.duration).toBe(2000);
  expect(noDurationAnimation.duration).toBe(4000);

  const caci = new ContextAwareClipIncident(
    {
      incidentId: 'animation',
      props: { ...animationProps, duration: 2000 },
      plugin_npm_name: 'my_test_plugin',
    },
    contextData,
    'my-animation',
    animation,
  );

  const ndcaci = new ContextAwareClipIncident(
    {
      incidentId: 'animation',
      props: { ...animationProps, duration: 4000 },
      plugin_npm_name: 'my_test_plugin',
    },
    contextData,
    'my-animation',
    noDurationAnimation,
  );

  expect(caci.timeScale).toEqual(0.5);
  expect(ndcaci.timeScale).toEqual(1);
});
