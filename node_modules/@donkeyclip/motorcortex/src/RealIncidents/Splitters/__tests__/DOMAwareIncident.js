/*
In order to test ElementSplitter we need to pass a context that has the
following structure / methods:
context: {
    document: {
        querySelectorAll(selector) {
            return ['element1', 'element2', 'element3']
        }
    },
    getMCID(element) {
        return element;
    },
    getElementSelectorByMCID(mcid) {
        return `${mcid}-selector`;
    }
}
*/

import DescriptiveIncident from '../../../DescriptiveIncidents/DescriptiveIncident';
import ElementSplitter from '../ElementSplitter';

const mockContext = {
  rootElement: {
    querySelectorAll() {
      // eslint-disable-line no-unused-vars
      return ['element1', 'element2', 'element3'];
    },
  },
  getMCID(element) {
    return element;
  },
  getElementSelectorByMCID(mcid) {
    return `${mcid}-selector`;
  },
  getElements() {
    // eslint-disable-line no-unused-vars
    return ['element1', 'element2', 'element3'];
  },
};

const contextData = {
  clipId: 'test-clip-id',
  context: mockContext,
};

const di = new DescriptiveIncident(
  {
    animatedAttrs: {
      alpha: 1.1,
      beta: 2.2,
    },
  },
  {
    duration: 1,
    selector: 'my-test-selector',
  },
);

const dai = new ElementSplitter(di, contextData);

test(`ElementSplitter should set up one AnimatedAttributeSplitter on 0 position per element
        on construction time`, () => {
  expect(Object.keys(dai.children).length).toEqual(3);
  expect(Object.keys(dai.children)).toContain(`${di.id}_element1`);
  expect(Object.keys(dai.children)).toContain(`${di.id}_element2`);
  expect(Object.keys(dai.children)).toContain(`${di.id}_element3`);
  expect(dai.children[`${di.id}_element1`].position).toEqual(0);
  expect(dai.children[`${di.id}_element2`].position).toEqual(0);
  expect(dai.children[`${di.id}_element3`].position).toEqual(0);
  expect(dai.children[`${di.id}_element1`].id).toEqual(`${di.id}_element1`);
  expect(dai.children[`${di.id}_element2`].id).toEqual(`${di.id}_element2`);
  expect(dai.children[`${di.id}_element3`].id).toEqual(`${di.id}_element3`);
  expect(dai.children[`${di.id}_element1`].leaf.id).toEqual(
    `${di.id}_element1`,
  );
  expect(dai.children[`${di.id}_element2`].leaf.id).toEqual(
    `${di.id}_element2`,
  );
  expect(dai.children[`${di.id}_element3`].leaf.id).toEqual(
    `${di.id}_element3`,
  );
});
