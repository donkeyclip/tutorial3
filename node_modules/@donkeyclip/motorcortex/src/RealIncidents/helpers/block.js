/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import { _DIRECTIONS } from '../../TimedTree/_CONST';
import { getAnId } from '../../_coreUtils/helper';

/**
 *
 * @param {string} description: the description of the block (human readable)
 * @param {object} options: an (optional) set of options for the block. For the time being the only supported option
 * is "exceptional" (boolean) value which if it's true the incident that set the block must be excluded from the block
 * This is called "exceptional block" and we use it in cases an incident that blocks need to remain at the playing
 * state in order to keep on trying to get unblocked (e.g. a youtube video play), otherwise we will end up with the
 * "waiting deadlock" where the clip waits for the incident to get unblocked while the incident waits for the clip play
 * so it can keep on trying to do so. In such cases "exceptional" should be true
 */
function block(description, options = {}) {
  if (this.blockID === undefined && !options.blockId) {
    this.blockID = getAnId();
  }
  this.DescriptiveIncident.putMessageOnPipe(
    'setBlock',
    {
      id: this.blockID || options.blockId,
      description,
      incidentId: this.DescriptiveIncident.id,
      realIncidentId: this.id,
      options,
    },
    'rootClip',
    { selfExecute: true, direction: _DIRECTIONS._UP },
  );
}

export default block;
