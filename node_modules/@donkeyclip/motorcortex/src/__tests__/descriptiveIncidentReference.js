import { audioSrc } from '../Clip/WebAudio/__tests__/audioSrc';
import HTMLDescriptiveClip from '../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import DescriptiveIncident from '../DescriptiveIncidents/DescriptiveIncident';
import { CoreAudioClip as _AudioClip, AudioPlayback, Group } from '../main';

const di1_container1 = 'di1_container-1';
const di2_container2 = 'di1_container-2';
const di1_container1_alpha = 'di1_container-1_alpha';

const myClip = new HTMLDescriptiveClip({
  html: `<div>
            <div class="clip-container" data-motorcortex2-id="container-1"></div>
            <div class="clip-container" data-motorcortex2-id="container-2"></div>
        </div>`,
  css: '',
  selector: '.casi',
  id: 'myClip',
});

const AudioClip = new _AudioClip({
  audioSources: [
    {
      src: audioSrc,
      id: 'hello',
      mcid: 'hello',
      classes: ['human'],
      base64: true,
    },
  ],
  id: 'audioClip2',
});

const di1 = new DescriptiveIncident(
  {
    animatedAttrs: {
      alpha: 1,
    },
  },
  {
    selector: '.clip-container',
    duration: 1000,
    id: 'di1',
  },
);

const PlaybackHello = new AudioPlayback(
  {},
  {
    selector: '~#hello',
    duration: 6000,
    startFrom: 1200,
    id: 'playback-hello',
  },
);

test('check that realClip and audioClip of a HTMLDescriptiveClip have the right reference to their DescriptiveIncident', () => {
  expect(myClip.realClip.DescriptiveIncident).toBe(myClip);
  expect(myClip.audioClip.DescriptiveIncident).toBe(myClip);
});

test('check that an audioClip entering another audioClip has the right reference to its DescriptiveIncident', () => {
  myClip.addIncident(AudioClip, 0);
  expect(AudioClip.audioClip.DescriptiveIncident).toBe(AudioClip);
});

test('check that all MonoIncidents of an Incident have the right reference to their DescriptiveIncident', () => {
  document.body.innerHTML = `<div id="clip-container"></div>
    `;

  myClip.addIncident(di1, 1000);
  expect(
    myClip.realClip.children.di1.leaf.children[di1_container1].leaf.children[
      di1_container1_alpha
    ].leaf.contexts.myClip.DescriptiveIncident,
  ).toBe(di1);
  expect(
    myClip.realClip.children.di1.leaf.children[di2_container2].leaf.children[
      'di1_container-2_alpha'
    ].leaf.contexts.myClip.DescriptiveIncident,
  ).toBe(di1);

  const host = document.getElementById('clip-container');
  const myRootClip = new HTMLDescriptiveClip({
    html: `<div>
            <div class="casi" data-motorcortex2-id="container-1"></div>
            <div class="casi" data-motorcortex2-id="container-2"></div>
        </div>`,
    css: '',
    host,
    id: 'myRootClip',
  });

  myRootClip.addIncident(myClip, 0);
  expect(
    Object.keys(
      myClip.realClip.children.di1.leaf.children[di1_container1].leaf.children[
        di1_container1_alpha
      ].leaf.contexts,
    ).length,
  ).toBe(3);
  for (const key in myClip.realClip.children.di1.leaf.children[di1_container1]
    .leaf.children[di1_container1_alpha].leaf.contexts) {
    const instance =
      myClip.realClip.children.di1.leaf.children[di1_container1].leaf.children[
        di1_container1_alpha
      ].leaf.contexts[key];
    expect(instance.DescriptiveIncident).toBe(di1);
  }
});

test('check that all AudioPlayback Incidents have the right reference to their DescriptiveIncident', () => {
  AudioClip.addIncident(PlaybackHello, 0);
  expect(
    myClip.audioClip.children.audioClip2.leaf.children['playback-hello'].leaf
      .children['playback-hello_hello'].leaf.DescriptiveIncident,
  ).toBe(PlaybackHello);
});

test('check that a group has the right reference to its DescriptiveIncident', () => {
  const myGroup = new Group({ id: 'myGroup' });
  myClip.addIncident(myGroup, 0);
  expect(myClip.realClip.children.myGroup.leaf.DescriptiveIncident).toBe(
    myGroup,
  );
});
