import * as MotorCortex from '../main.js';
const Clip = MotorCortex.HTMLClip;
const Group = MotorCortex.Group;
import DescriptiveIncident from '../DescriptiveIncidents/DescriptiveIncident';
import constructIncident from '../IncidentFromDefinition/clipFromDefinition';

let myClip;

test(`CFD01. Test a successful clipFromDefinition`, () => {
  document.body.innerHTML = `<div>
        <div id="clip-container"></div>
        <div id="clip-container-2"></div>
        <div id="clip-container-3"></div>
        <div id="clip-container-4"></div>
    </div>
    `;

  myClip = new Clip({
    html: () =>
      `<div id="my-root-div">
        <div id="element-1" class="a" test="0"></div>
        <div id="element-2" class="a" test="0"></div>
        <div id="element-3" class="b"></div>
        <div id="element-4" class="b"></div>
      </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  const group = new Group();

  const incidentA = new DescriptiveIncident(
    {
      animatedAttrs: {
        a: '500px',
      },
    },
    {
      selector: '.a',
      duration: 1000,
    },
  );

  const incidentB = new DescriptiveIncident(
    {
      animatedAttrs: {
        a: '600px',
      },
    },
    {
      selector: '.b',
      duration: 1000,
    },
  );

  group.addIncident(incidentB, 0);
  myClip.addIncident(incidentA, 0);
  myClip.addIncident(group, 0);

  let liveDefinition = myClip.exportLiveDefinition();

  liveDefinition.props.host = document.querySelector('#clip-container-2');
  const copy = MotorCortex.utils.clipFromDefinition(liveDefinition);
  expect(copy instanceof Clip).toEqual(true);
});

test(`CFD02. Test an unsuccessfull clipFromDefinition due to invalid props`, () => {
  let liveDefinition = myClip.exportLiveDefinition();
  liveDefinition.props.host = null;
  liveDefinition.props.selector = null;
  const copy = MotorCortex.utils.clipFromDefinition(liveDefinition);
  expect(copy.result).toEqual(false);
  expect(copy.errors.length).toBeGreaterThan(0);
});

test(`CFD03. Test an unsuccessfull clipFromDefinition due to conflicting Incidents`, () => {
  let liveDefinition = myClip.exportLiveDefinition();
  liveDefinition.props.host = document.querySelector('#clip-container-3');
  liveDefinition.props.html = `
         <div id="my-root-div">
            <div id="element-1" class="a" test="0"></div>
            <div id="element-2" class="a b" test="0"></div>
            <div id="element-3" class="b"></div>
            <div id="element-4" class="b"></div>
        </div>
    `;
  const copy = MotorCortex.utils.clipFromDefinition(liveDefinition);
  expect(copy.result).toEqual(false);
  expect(copy.errors.length).toBeGreaterThan(0);
});

test(`CFD04. Test an unsuccessfull clipFromDefinition due to an internal Incident's invalid props`, () => {
  let liveDefinition = myClip.exportLiveDefinition();
  liveDefinition.props.host = document.querySelector('#clip-container-4');
  liveDefinition.incidents[
    Object.keys(liveDefinition.incidents)[0]
  ].leaf.props.selector = null;
  const copy = MotorCortex.utils.clipFromDefinition(liveDefinition);
  expect(copy.result).toEqual(false);
  expect(copy.errors.length).toBeGreaterThan(0);
});

test('CFD05. Test exportLiveDefinition with no ids and incidentFromDefinition', () => {
  const g = new Group({ id: 'group', name: 'Group' });
  const g2 = new Group({ id: 'group2', name: 'Group 2' });
  const inc = new DescriptiveIncident(
    { animatedAttrs: { a: 2 } },
    { id: 'inc', selector: 'a', duration: 1000 },
  );
  g.addIncident(g2, 1000);
  g2.addIncident(inc, 0);
  const res = g.exportLiveDefinition(false);
  expect(res.props).toEqual({
    name: 'Group',
  });
  expect(res.incidents.group2.leaf.props).toEqual({
    name: 'Group 2',
  });

  const clone = constructIncident(res);
  expect(clone).toBeInstanceOf(res.Class);
});
