import { HTMLClip, loadPlugin, Effect } from '../main';

const my_class_1 = 'my-class-1';
const my_class_2 = 'my-class-2';
const my_subclass_1 = 'my-subclass-1';
const my_subclass_2 = 'my-subclass-2';
/** ************************* PLUGIN DEFINITION ************************ */
/** ******************************************************************* */
class MyPluginIncident extends Effect {
  onGetContext() {}

  // eslint-disable-next-line no-unused-vars
  onProgress(ms) {
    const fraction = this.getFraction(ms);
    const { initialValue } = this;
    const { targetValue } = this;
    const value = initialValue + (targetValue - initialValue) * fraction;

    this.element.setAttribute(this.attributeKey, value);
  }

  getScratchValue() {
    // eslint-disable-line no-unused-vars
    return 0;
  }
}

class MyPluginClip extends HTMLClip {
  buildTree() {}

  get html() {
    return `
            <div>
                <div class="sub-class" id="my-test-div" data-motorcortex2-id="my-subclass-1"></div>
                <div class="sub-class" id="my-test-div-2" data-motorcortex2-id="my-subclass-2"></div>
            <div>`;
  }

  get css() {
    return '';
  }
}

/** ************************* PLUGIN LOADING ************************** */
/** ******************************************************************* */
const testPlugin = {
  npm_name: '@donkeyclip/test-plugin',
  name: 'Test Plugin',
  incidents: [
    {
      exportable: MyPluginIncident,
      name: 'MPInc',
    },
    {
      exportable: MyPluginClip,
      name: 'MPClip',
    },
  ],
};

const TestPlugin = loadPlugin(testPlugin);

test('onProgress functionality', () => {
  /** ****************** INCIDENTS INSTANTIATION ************************ */
  /** ******************************************************************* */
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 1000,
      },
    },
    {
      selector: '.my-class',
      duration: 1000,
    },
  );

  const newSubMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 1000,
      },
    },
    {
      selector: '.sub-class',
      duration: 1000,
    },
  );

  const newMPClip = new TestPlugin.MPClip({
    selector: '.class-1',
    id: 'my-new-MPClip',
  });

  /** ********************* ROOT CLIP DEFINITION ************************ */
  /** ******************************************************************* */
  document.body.innerHTML = '<div id="clip-container"></div>';

  const myClip = new HTMLClip({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1" test="0"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2" test="0"></div>
                <div id="element-3" class="class-1" data-motorcortex2-id="class-1"></div>
                <div id="element-3-1" class="class-1" data-motorcortex2-id="class-1-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  myClip.addIncident(newMPInc, 0);
  myClip.addIncident(newMPClip, 0);
  newMPClip.addIncident(newSubMPInc, 1000);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(0);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(0);
  const ccopiesKeys = Object.keys(
    newMPClip.realClip.instantiatedCopiesContexts,
  );
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */
  myClip.playableProgress(500 / myClip.duration, 500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */
  myClip.playableProgress(1500 / myClip.duration, 1500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(500);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(500);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */

  myClip.playableProgress(500 / myClip.duration, 500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }
});

test('onProgress with delay, hiatus and repeats', () => {
  /** ********************* ROOT CLIP DEFINITION ************************ */
  /** ******************************************************************* */
  document.body.innerHTML = '<div id="clip-container"></div>';

  const myClip = new HTMLClip({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1" test="0"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2" test="0"></div>
                <div id="element-3" class="class-1" data-motorcortex2-id="class-1"></div>
                <div id="element-3-1" class="class-1" data-motorcortex2-id="class-1-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  /** ****************** INCIDENTS INSTANTIATION ************************ */
  /** ******************************************************************* */
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 1000,
      },
    },
    {
      selector: '.my-class',
      duration: 1000,
      delay: 500,
      hiatus: 300,
      repeats: 6,
    },
  );

  myClip.addIncident(newMPInc, 0);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(0);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(0);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** within delay of first repeat************************ */
  myClip.playableProgress(200 / myClip.duration, 200);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(200);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(200);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the edge of the first delay ************************ */
  myClip.playableProgress(500 / myClip.duration, 500);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** in the middle of the first play ************************ */
  myClip.playableProgress(1000 / myClip.duration, 1000);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1000);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1000);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the right edge of the first play ************************ */
  myClip.playableProgress(1500 / myClip.duration, 1500);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1500);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** in the middle of hiatus ************************ */
  myClip.playableProgress(1650 / myClip.duration, 1650);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1650);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1650);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the right edge of the first hiatus ************************ */
  myClip.playableProgress(1800 / myClip.duration, 1800);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1800);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1800);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** in the delay of second repeat ************************ */
  myClip.playableProgress(1900 / myClip.duration, 1900);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1900);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1900);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** in the right edge of the delay of second repeat ************************ */
  myClip.playableProgress(2300 / myClip.duration, 2300);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(2300);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(2300);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** in the middle of the play of second repeat ************************ */
  myClip.playableProgress(2800 / myClip.duration, 2800);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(2800);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(2800);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the right edge of the play of second repeat ************************ */
  myClip.playableProgress(3300 / myClip.duration, 3300);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(3300);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(3300);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the hiatus of second repeat ************************ */
  myClip.playableProgress(3500 / myClip.duration, 3500);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(3500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(3500);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** *********************** at the right edge of the hiatus of second repeat ************************ */
  myClip.playableProgress(3600 / myClip.duration, 3600);
  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(3600);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(3600);
});
