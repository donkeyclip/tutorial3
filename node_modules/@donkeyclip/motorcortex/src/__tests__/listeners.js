import HTMLDescriptiveClip from '../Clip/Browser/Descriptive/HTMLDescriptiveClip';
import DescriptiveIncident from '../DescriptiveIncidents/DescriptiveIncident';

let myClip;
const di1 = new DescriptiveIncident(
  {
    animatedAttrs: { alpha: 1 },
  },
  {
    duration: 1000,
    id: 'di1',
    selector: '.my-class',
  },
);

test('When the Clip progresses the subscribed listeners should be informed', () => {
  const loggedMilliseconds = [];

  document.body.innerHTML = '<div id="clip-container"></div>';

  myClip = new HTMLDescriptiveClip({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1"></div>
            </div>`,
    css: '',
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  myClip.addIncident(di1, 0);

  myClip.subscribe('my-sub', (milliseconds) => {
    loggedMilliseconds.push(milliseconds);
  });

  myClip.playableProgress(10 / 1000, 10);
  myClip.playableProgress(20 / 1000, 20);
  myClip.playableProgress(50 / 1000, 50);
  myClip.playableProgress(500 / 1000, 500);
  myClip.playableProgress(40 / 1000, 40);

  expect(loggedMilliseconds).toEqual([10, 20, 50, 500, 40]);
});

test('Test threshold on progress subscribers', () => {
  const loggedMilliseconds = [];

  myClip.subscribe(
    'my-sub',
    (milliseconds) => {
      loggedMilliseconds.push(milliseconds);
    },
    50,
  );

  myClip.playableProgress(0, 0);
  myClip.playableProgress(60 / 1000, 60);
  myClip.playableProgress(100 / 1000, 100);
  myClip.playableProgress(200 / 1000, 200);
  myClip.playableProgress(220 / 1000, 220);
  myClip.playableProgress(240 / 1000, 240);

  expect(loggedMilliseconds).toEqual([60, 200]);
});

test('Test round on progress subscribers', () => {
  const loggedMilliseconds = [];

  myClip.subscribe(
    'my-sub',
    (milliseconds) => {
      loggedMilliseconds.push(milliseconds);
    },
    0,
    50,
  );

  myClip.playableProgress(60 / 1000, 60);
  myClip.playableProgress(110 / 1000, 110);
  myClip.playableProgress(140 / 1000, 140);
  myClip.playableProgress(220 / 1000, 220);
  myClip.playableProgress(240 / 1000, 240);

  expect(loggedMilliseconds).toEqual([50, 100, 150, 200, 250]);
});

test('Test unsubscribe from milliseconds change', () => {
  const loggedMilliseconds = [];

  myClip.subscribe('my-sub', (milliseconds) => {
    loggedMilliseconds.push(milliseconds);
  });

  myClip.playableProgress(10 / 1000, 10);
  myClip.playableProgress(20 / 1000, 20);
  myClip.playableProgress(50 / 1000, 50);
  myClip.playableProgress('my-sub');
  myClip.playableProgress(500 / 1000, 500);
  myClip.playableProgress(40 / 1000, 40);

  expect(loggedMilliseconds).toEqual([10, 20, 50]);
});

test('Test duration change listeners', () => {
  const loggedDurations = [];

  myClip.subscribeToDurationChange((newDuration) => {
    loggedDurations.push(newDuration);
  });

  myClip.removeIncident('di1');
  myClip.addIncident(di1, 1000);
  myClip.moveIncident('di1', 2000);
  myClip.resize(1500);
  di1.resize(1000);

  expect(loggedDurations).toEqual([0, 2000, 3000, 1500, 2000]);
});

test('Test status change listeners', () => {
  const loggedStatuses = [];

  myClip.subscribe('my-sub', (milliseconds, status) => {
    loggedStatuses.push(status);
  });

  myClip.play();
  myClip.pause();
  myClip.play();
  myClip.pause();
  myClip.complete();

  expect(loggedStatuses).toEqual([
    'playing',
    'paused',
    'playing',
    'paused',
    'idle',
  ]);
});
