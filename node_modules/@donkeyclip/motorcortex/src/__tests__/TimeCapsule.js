import {
  HTMLClip,
  loadPlugin,
  Effect,
  TimeCapsule as _TimeCapsule,
} from '../main';

const TimeCapsule = new _TimeCapsule();

const my_class_1 = 'my-class-1';
const my_class_2 = 'my-class-2';
const my_subclass_1 = 'my-subclass-1';
const my_subclass_2 = 'my-subclass-2';

test('TimeCapsule journey', () => {
  /** ************************* PLUGIN DEFINITION ************************ */
  /** ******************************************************************* */
  class MyPluginIncident extends Effect {
    onGetContext() {}

    // eslint-disable-next-line no-unused-vars
    onProgress(ms) {
      const fraction = this.getFraction(ms);
      const { initialValue } = this;
      const { targetValue } = this;
      const value = initialValue + (targetValue - initialValue) * fraction;

      this.element.setAttribute(this.attributeKey, value);
    }

    getScratchValue() {
      // eslint-disable-line no-unused-vars
      return 0;
    }
  }

  class MyPluginClip extends HTMLClip {
    buildTree() {}

    get html() {
      return `
            <div>
                <div class="sub-class" id="my-test-div" data-motorcortex2-id="my-subclass-1"></div>
                <div class="sub-class" id="my-test-div-2" data-motorcortex2-id="my-subclass-2"></div>
            <div>`;
    }

    get css() {
      return '';
    }
  }

  /** ************************* PLUGIN LOADING ************************** */
  /** ******************************************************************* */
  const testPlugin = {
    npm_name: '@donkeyclip/test-plugin',
    name: 'Test Plugin',
    incidents: [
      {
        exportable: MyPluginIncident,
        name: 'MPInc',
      },
      {
        exportable: MyPluginClip,
        name: 'MPClip',
      },
    ],
  };

  const TestPlugin = loadPlugin(testPlugin);

  /** ****************** INCIDENTS INSTANTIATION ************************ */
  /** ******************************************************************* */
  const newMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 1000,
      },
    },
    {
      selector: '.my-class',
      duration: 1000,
    },
  );

  const newMPInc2 = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 0,
      },
    },
    {
      selector: '.my-class',
      duration: 500,
    },
  );

  const newSubMPInc = new TestPlugin.MPInc(
    {
      animatedAttrs: {
        test: 1000,
      },
    },
    {
      selector: '.sub-class',
      duration: 1000,
    },
  );

  const newMPClip = new TestPlugin.MPClip({
    selector: '.class-1',
    id: 'my-new-MPClip',
  });

  /** ********************* ROOT CLIP DEFINITION ************************ */
  /** ******************************************************************* */
  document.body.innerHTML = '<div id="clip-container"></div>';

  const myClip = new HTMLClip({
    html: `
            <div id="my-root-div">
                <div id="element-1" class="my-class" data-motorcortex2-id="my-class-1" test="0"></div>
                <div id="element-2" class="my-class" data-motorcortex2-id="my-class-2" test="0"></div>
                <div id="element-3" class="class-1" data-motorcortex2-id="class-1"></div>
                <div id="element-3-1" class="class-1" data-motorcortex2-id="class-1-2"></div>
            </div>`,
    css: `
            #my-root-div {
                width: 800px;
                height: 400px;
            }
            .my-class {
                display: inline-block;
                width: 50%;
                height: 100%;
            }
        `,
    host: document.querySelector('#clip-container'),
    id: 'my-clip',
  });

  myClip.addIncident(newMPInc, 0);
  myClip.addIncident(newMPClip, 0);
  myClip.addIncident(newMPInc2, 1200);
  newMPClip.addIncident(newSubMPInc, 1000);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(0);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(0);
  const ccopiesKeys = Object.keys(
    newMPClip.realClip.instantiatedCopiesContexts,
  );
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */
  const journey = TimeCapsule.startJourney(myClip);
  journey.station(500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */
  journey.station(1500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(400);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(400);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(1500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(1500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(500);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(500);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */

  journey.station(500);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(500);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(500);
  expect(myClip.realClip.runTimeInfo.currentMillisecond).toBe(500);
  expect(myClip.runTimeInfo.currentMillisecond).toBe(500);
  for (let i = 0; i < ccopiesKeys.length; i++) {
    const ccopyContext =
      newMPClip.realClip.instantiatedCopiesContexts[ccopiesKeys[i]];

    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_1).getAttribute('test'),
      ),
    ).toBe(0);
    expect(
      parseInt(
        ccopyContext.getElementByMCID(my_subclass_2).getAttribute('test'),
      ),
    ).toBe(0);
  }

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */

  journey.station(1800);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(0);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(0);

  /** *********************** ROOT CLIP PROGRESS ************************ */
  /** ******************************************************************* */

  journey.station(1100);

  /** ************************* EXPECTATIONS **************************** */
  /** ******************************************************************* */
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_1).getAttribute('test'),
    ),
  ).toBe(1000);
  expect(
    parseInt(
      myClip.realClip.context.getElementByMCID(my_class_2).getAttribute('test'),
    ),
  ).toBe(1000);

  journey.destination();
  const journeyLog = journey.exportLog();

  expect(journeyLog).toEqual({
    startMillisecond: 0,
    startState: 'idle',
    stations: [500, 1500, 500, 1800, 1100],
  });

  expect(myClip.runTimeInfo.state).toBe('armed');
});
