import { loadPlugin, BrowserClip, HTMLClip, Group } from '../main';

const clip_container = 'clip-container';

class CustomClip extends BrowserClip {}

let entered = false;
class MyPluginClip extends HTMLClip {
  buildTree() {
    const group = new Group();
    entered = true;
    this.addIncident(group, 0);
  }
}

const testPlugin = {
  npm_name: '@donkeyclip/test-plugin',
  incidents: [
    {
      exportable: MyPluginClip,
      name: 'MyPluginClip',
      attributesValidationRules: {
        attr: {
          type: 'number',
        },
      },
    },
  ],
  Clip: {
    exportable: CustomClip,
    attributesValidationRules: {
      test: { type: 'color' },
    },
  },
};

const TestPlugin = loadPlugin(testPlugin);

test('01. Failing attributes check', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;
  const MyClip = new TestPlugin.Clip(
    {
      test: 'not a color',
    },
    {
      host: document.getElementById(clip_container),
    },
  );
  expect(MyClip.result).toBe(false);
});

test('02. Passing attributes check', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;
  const MyClip = new TestPlugin.Clip(
    {
      test: '#FFFFFF',
    },
    {
      host: document.getElementById(clip_container),
    },
  );
  expect(MyClip.constructor.name).toBe('DynamicDescriptiveClip');
});

test("03. Test a plugin's Incident extending HTMLClip and running buildTree method", () => {
  // eslint-disable-next-line no-unused-vars
  const result = new TestPlugin.MyPluginClip(
    {
      attr: 'wrong value',
    },
    {
      selector: '.test',
    },
  );
  expect(entered).toBe(false);
});

test('04. Color accepts dynamic values', () => {
  document.body.innerHTML = `<div id="clip-container"></div>`;
  const MyClip = new TestPlugin.Clip(
    {
      test: '@expression(initParams.color)',
    },
    {
      host: document.getElementById(clip_container),
    },
  );
  expect(MyClip.constructor.name).toBe('DynamicDescriptiveClip');
});
