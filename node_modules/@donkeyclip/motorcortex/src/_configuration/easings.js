/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

const doublePI = 2 * Math.PI;
export const easing = {
  linear(fraction) {
    return fraction;
  },
  easeInQuad(fraction) {
    return fraction * fraction;
  },
  easeOutQuad(fraction) {
    return fraction * (2 - fraction);
  },
  easeInOutQuad(fraction) {
    return fraction < 0.5
      ? 2 * fraction * fraction
      : -1 + (4 - 2 * fraction) * fraction;
  },
  easeInCubic(fraction) {
    return fraction * fraction * fraction;
  },
  easeOutCubic(fraction) {
    return --fraction * fraction * fraction + 1;
  },
  easeInOutCubic(fraction) {
    return fraction < 1 / 2
      ? 4 * fraction * fraction * fraction
      : (fraction - 1) * (2 * fraction - 2) * (2 * fraction - 2) + 1;
  },
  easeInQuart(fraction) {
    return fraction * fraction * fraction * fraction;
  },
  easeOutQuart(fraction) {
    return 1 - --fraction * fraction * fraction * fraction;
  },
  easeInOutQuart(fraction) {
    return fraction < 0.5
      ? 8 * fraction * fraction * fraction * fraction
      : 1 - 8 * --fraction * fraction * fraction * fraction;
  },
  easeInQuint(fraction) {
    return fraction * fraction * fraction * fraction * fraction;
  },
  easeOutQuint(fraction) {
    return 1 + --fraction * fraction * fraction * fraction * fraction;
  },
  easeInOutQuint(fraction) {
    return fraction < 0.5
      ? 16 * fraction * fraction * fraction * fraction * fraction
      : 1 + 16 * --fraction * fraction * fraction * fraction * fraction;
  },
  easeInSine(fraction) {
    return -1 * Math.cos(fraction * (Math.PI / 2)) + 1;
  },
  easeOutSine(fraction) {
    return Math.sin(fraction * (Math.PI / 2));
  },
  easeInOutSine(fraction) {
    return -(Math.cos(Math.PI * fraction) - 1) / 2;
  },
  easeInExpo(fraction) {
    return fraction == 0 ? 1 : 1 * Math.pow(2, 10 * (fraction - 1));
  },
  easeOutExpo(fraction) {
    return fraction == 1 ? 1 : 1 * (-Math.pow(2, -10 * fraction) + 1);
  },
  easeInOutExpo(fraction) {
    if (fraction == 0 || fraction == 1) return fraction;
    if ((fraction *= 2) < 1) return Math.pow(2, 10 * (fraction - 1)) / 2;
    return (-Math.pow(2, -10 * --fraction) + 2) / 2;
  },
  easeInCirc(fraction) {
    if (fraction >= 1) return fraction;
    return -(Math.sqrt(1 - fraction * fraction) - 1);
  },
  easeOutCirc(fraction) {
    return Math.sqrt(1 - (fraction = fraction / 1 - 1) * fraction);
  },
  easeInOutCirc(fraction) {
    if ((fraction *= 2) < 1)
      return -(Math.sqrt(1 - fraction * fraction) - 1) / 2;
    return (Math.sqrt(1 - (fraction -= 2) * fraction) + 1) / 2;
  },
  easeInElastic(fraction) {
    if (fraction == 0 || fraction == 1) return fraction;

    let p = 0.3;
    let s = (p / doublePI) * Math.asin(1);

    return -(
      Math.pow(2, 10 * (fraction -= 1)) *
      Math.sin(((fraction * 1 - s) * doublePI) / p)
    );
  },
  easeOutElastic(fraction) {
    if (fraction == 0 || fraction == 1) return fraction;

    let p = 0.3;
    let s = (p / doublePI) * Math.asin(1);

    return (
      Math.pow(2, -10 * fraction) * Math.sin(((fraction - s) * doublePI) / p) +
      1
    );
  },
  easeInOutElastic(fraction) {
    if (fraction == 0 || fraction == 1) return fraction;

    let p = 0.3 * 1.5;
    let s = (p / doublePI) * Math.asin(1);
    if (fraction < 1)
      return (
        -(
          Math.pow(2, 10 * (fraction -= 1)) *
          Math.sin(((fraction - s) * doublePI) / p)
        ) / 2
      );
    return (
      (Math.pow(2, -10 * (fraction -= 1)) *
        Math.sin(((fraction - s) * doublePI) / p)) /
        2 +
      1
    );
  },
  easeInBack(fraction) {
    const s = 1.70158;
    return fraction * fraction * ((s + 1) * fraction - s);
  },
  easeOutBack(fraction) {
    const s = 1.70158;
    return (fraction -= -1) * fraction * ((s + 1) * fraction + s) + 1;
  },
  easeInOutBack(fraction) {
    let s = 1.70158;
    if ((fraction *= 2) < 1)
      return (fraction * fraction * (((s *= 1.525) + 1) * fraction - s)) / 2;
    return (
      ((fraction -= 2) * fraction * (((s *= 1.525) + 1) * fraction + s) + 2) / 2
    );
  },
  easeInBounce(fraction) {
    return 1 - easing.easeOutBounce(1 - fraction);
  },
  easeOutBounce(fraction) {
    if (fraction < 1 / 2.75) {
      return 1 * (7.5625 * fraction * fraction);
    }
    if (fraction < 2 / 2.75) {
      return 7.5625 * (fraction -= 1.5 / 2.75) * fraction + 0.75;
    }
    if (fraction < 2.5 / 2.75) {
      return 7.5625 * (fraction -= 2.25 / 2.75) * fraction + 0.9375;
    }
    return 7.5625 * (fraction -= 2.625 / 2.75) * fraction + 0.984375;
  },
  easeInOutBounce(fraction) {
    return (
      (fraction < 0.5
        ? easing.easeInBounce(fraction * 2)
        : easing.easeOutBounce(fraction * 2 - 1) + 1) / 2
    );
  },
};

export default easing;
