/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

/*
known events:
- state-change / meta: the name of the new state
- attribute-rejection / meta: animationID, attributes
- animation-rejection / meta: animationID
- conflicts-on-edit
*/
export const logTypes = [
  {
    key: 'info',
    style: 'color:#666;',
    level: 5,
    consoleMethod: 'log',
  },
  {
    key: 'notice',
    style: 'background:rgba(0,0,0,0.8);color:white;padding:8px;',
    level: 4,
    consoleMethod: 'log',
  },
  {
    key: 'warning',
    style: 'color:black;background:orange;',
    level: 2,
    consoleMethod: 'warn',
  },
  {
    key: 'error',
    style: 'color:black;background:red;',
    level: 1,
    consoleMethod: 'error',
  },
];
export const lanesMCIDattrsSeparator = '___';
export const elementsDataAttributeName = 'data-motorcortex2-id';
export const logLevel = 2;
export const testMode = true;
export const mcNameSpace = 'MotorCortex';

export const dynamicValuesTerms = {
  dynamicDuration: 'dynamic',
  totalElements: 'total',
  elementIndex: 'index',
  initParams: 'initParams',
};

/**
 * when a dynamic value validation method is been defined it has the checkValues method available. This method takes an
 * array of values to be checked against the original schema of the property. Long story short, when a dv gets validated
 * by the provided validation method of the dv implementation the developer has the chance to extract any values out of
 * the provided expression and check them against the original schema of the field. (e.g. on @stagger(0px, 200px) the
 * developer will call checkValues(["0px", "200px"]) which will check both values against the original schema of the field
 * (e.g. it'll check for min, max, units etc).
 * The way MC supports dv implementation is via strings and this check can only occur for very specific field types, or
 * to put it another way, it can't support specific field types. This property holds the list of NOT supported field
 * types.
 * @type {*[]}
 */
export const unsupportedDVTypesSchemaCheck = [
  'object',
  'array',
  'any',
  'boolean',
  'class',
  'tuple',
];
