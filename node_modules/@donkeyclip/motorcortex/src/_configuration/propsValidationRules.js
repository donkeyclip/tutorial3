/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

import validator from '../_coreUtils/customValidator';

const nu = [
  'cm',
  'mm',
  'in',
  'px',
  'pt',
  'pc',
  'em',
  'ex',
  'ch',
  'rem',
  'vw',
  'vh',
  'vmin',
  'vmax',
  '%',
];

export const easingRule = [
  {
    type: 'string',
    optional: true,
    default: 'linear',
    enum: [
      'linear',
      'easeInQuad',
      'easeOutQuad',
      'easeInOutQuad',
      'easeInCubic',
      'easeOutCubic',
      'easeInOutCubic',
      'easeInQuart',
      'easeOutQuart',
      'easeInOutQuart',
      'easeInQuint',
      'easeOutQuint',
      'easeInOutQuint',
      'easeInSine',
      'easeOutSine',
      'easeInOutSine',
      'easeInExpo',
      'easeOutExpo',
      'easeInOutExpo',
      'easeInCirc',
      'easeOutCirc',
      'easeInOutCirc',
      'easeInElastic',
      'easeOutElastic',
      'easeInOutElastic',
      'easeInBack',
      'easeOutBack',
      'easeInOutBack',
      'easeInBounce',
      'easeOutBounce',
      'easeInOutBounce',
    ],
  },
  {
    type: 'array',
    optional: true,
    length: 4,
    items: {
      type: 'number',
    },
  },
];

export const idRule = {
  type: 'string',
  empty: false,
  trim: true,
  optional: true,
};

export const nameRule = {
  type: 'string',
  empty: false,
  trim: true,
  optional: true,
};

export const selectorRule = {
  type: 'string',
  empty: false,
  optional: false,
};

export const hostRule = {
  type: 'any',
  optional: false,
};

export const durationRule = {
  type: 'amount',
  optional: false,
  integer: true,
  min: 0,
};

export const optionalDurationRule = {
  type: 'amount',
  optional: true,
  integer: true,
  min: 0,
};

export const repeatsRule = {
  type: 'amount',
  integer: true,
  min: 1,
  optional: true,
};
export const hiatusRule = {
  type: 'amount',
  integer: true,
  min: 0,
  optional: true,
};
export const delayRule = {
  type: 'amount',
  integer: true,
  min: 0,
  optional: true,
};

export const optionalStringRule = {
  type: 'string',
  optional: true,
};

export const optionalHtmlRule = {
  type: 'html',
  optional: true,
};

export const optionalCssRule = {
  type: 'css',
  optional: true,
};

export const fontsRule = {
  type: 'array',
  optional: true,
  items: {
    type: 'object',
    props: {
      type: {
        enum: ['google-font'],
        type: 'string',
      },
      src: {
        type: 'string',
      },
    },
  },
};

export const audioSourcesRule = {
  type: 'array',
  items: {
    type: 'object',
    strict: true,
    props: {
      src: 'string',
      id: 'string',
      mcid: { type: 'string', optional: true },
      classes: { type: 'array', optional: true, items: 'string' },
      base64: { type: 'boolean', optional: true },
      startValues: {
        optional: true,
        type: 'object',
        props: {
          gain: { optional: true, type: 'number' },
          pan: { optional: true, type: 'number' },
        },
      },
    },
  },
  optional: true,
};

export const incidentPropsRule = validator.compile({
  id: idRule,
  name: nameRule,
  selector: { ...selectorRule, optional: true }, // can have no selector as it might inherit it from Group
  easing: easingRule,
  duration: durationRule,
  startFrom: {
    type: 'amount',
    integer: true,
    min: 0,
    optional: true,
  },
  repeats: repeatsRule,
  hiatus: hiatusRule,
  delay: delayRule,
});

export const containerParamsRule = {
  type: 'object',
  optional: true,
  props: {
    width: {
      type: 'measurement',
      units: nu,
      optional: true,
    },
    height: {
      type: 'measurement',
      units: nu,
      optional: true,
    },
  },
};

export const audioOnClipsRule = {
  type: 'string',
  enum: ['on', 'off', 'only'],
  optional: true,
};

export const clipPropsRule = validator.compile({
  props: [
    {
      type: 'object',
      strict: true,
      props: {
        id: idRule,
        name: nameRule,
        selector: { ...selectorRule, optional: true },
        repeats: repeatsRule,
        hiatus: hiatusRule,
        delay: delayRule,
        easing: easingRule,
        duration: optionalDurationRule,
        html: optionalHtmlRule,
        css: optionalCssRule,
        audioSources: audioSourcesRule,
        audio: audioOnClipsRule,
        containerParams: containerParamsRule,
        fonts: fontsRule,
        initParams: { type: 'object', optional: true },
      },
    },
    {
      type: 'object',
      strict: true,
      props: {
        id: idRule,
        name: nameRule,
        host: hostRule,
        duration: optionalDurationRule,
        html: optionalHtmlRule,
        css: optionalCssRule,
        audioSources: audioSourcesRule,
        audio: audioOnClipsRule,
        containerParams: containerParamsRule,
        fonts: fontsRule,
        initParams: { type: 'object', optional: true },
        initParamsValidationRules: { type: 'object', optional: true },
      },
    },
    {
      type: 'object',
      strict: true,
      props: {
        root: { type: 'boolean', optional: true },
        name: nameRule,
        id: idRule,
        audioSources: audioSourcesRule,
        audio: { ...audioOnClipsRule, enum: ['on'] },
      },
    },
  ],
});

export const groupPropsRule = validator.compile({
  selector: { ...selectorRule, optional: true, strict: true },
  name: nameRule,
});

export const comboPropsRule = validator.compile({
  selector: { ...selectorRule, strict: true, optional: true },
  name: nameRule,
  repeats: {
    type: 'amount',
    integer: true,
    min: 1,
    optional: true,
  },
  hiatus: {
    type: 'amount',
    integer: true,
    min: 0,
    optional: true,
  },
  delay: {
    type: 'amount',
    integer: true,
    min: 0,
    optional: true,
  },
});

export const mediaPlaybackPropsRule = validator.compile({
  selector: selectorRule,
  duration: durationRule,
});

export default {
  incidentPropsRule,
  groupPropsRule,
  mediaPlaybackPropsRule,
  clipPropsRule,
  comboPropsRule,
};
