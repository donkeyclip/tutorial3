expect.extend({
  toHaveNoErros(result) {
    const pass = result.length === 0;
    if (pass) {
      return {
        message: () => `expected ${result} to have 0 length`,
        pass: true,
      };
    }

    console.log(result);
    return {
      message: () => `Error on lanes test`,
      pass: false,
    };
  },
});

/**
 * mocks for testing
 * */
const MockNode = class {
  constructor() {
    this.status = 'stopped';
    this.connection = null;
    this.executionHistory = [];
    this.gain = {
      value: 1,
    };
  }

  clearLog() {
    this.executionHistory = [];
  }

  exportLog() {
    return this.executionHistory;
  }

  connect(mockNode) {
    this.connection = mockNode;
  }

  disconnect() {
    this.connection = null;
  }

  start(placeholder, ms) {
    this.status = 'playing';
    this.executionHistory.push({
      event: 'start',
      ms,
    });
  }

  stop() {
    this.status = 'stopped';
    this.executionHistory.push({
      event: 'stop',
    });
  }
};

window.AudioContext = jest.fn().mockImplementation(() => {
  return {
    createGain() {
      return new MockNode();
    },
    createStereoPanner() {
      return new MockNode();
    },
    createBiquadFilter() {
      return new MockNode();
    },
    decodeAudioData(arraybuffer, callback) {
      callback({});
    },
    createBufferSource() {
      return new MockNode();
    },
    destination: 'destination',
  };
});

if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function (str, newStr) {
    // If a regex pattern
    if (
      Object.prototype.toString.call(str).toLowerCase() === '[object regexp]'
    ) {
      return this.replace(str, newStr);
    }

    // If a string
    return this.replace(new RegExp(str, 'g'), newStr);
  };
}

const filterFunction = function (fun /*, thisArg*/) {
  'use strict';

  if (this === void 0 || this === null) {
    throw new TypeError();
  }

  var t = Object(this);
  var len = t.length >>> 0;
  if (typeof fun !== 'function') {
    throw new TypeError();
  }

  var res = [];
  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  for (var i = 0; i < len; i++) {
    if (i in t) {
      var val = t[i];

      // NOTE: Technically this should Object.defineProperty at
      //       the next index, as push can be affected by
      //       properties on Object.prototype and Array.prototype.
      //       But that method's new, and collisions should be
      //       rare, so use the more-compatible alternative.
      if (fun.call(thisArg, val, i, t)) {
        res.push(val);
      }
    }
  }

  return res;
};

if (!Array.prototype.filter) {
  Array.prototype.filter = filterFunction;
}

if (!HTMLCollection.prototype.filter) {
  HTMLCollection.prototype.filter = filterFunction;
}
