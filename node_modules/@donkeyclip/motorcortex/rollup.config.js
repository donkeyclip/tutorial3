/* eslint-disable sonarjs/no-duplicate-string */
import babel from '@rollup/plugin-babel';
import commonjs from '@rollup/plugin-commonjs';
import json from '@rollup/plugin-json';
import resolve from '@rollup/plugin-node-resolve';
import replace from '@rollup/plugin-replace';
import analyze from 'rollup-plugin-analyzer';
import cleanup from 'rollup-plugin-cleanup';
import { terser } from 'rollup-plugin-terser';
import visualizer from 'rollup-plugin-visualizer';
import pkg from './package.json';
const ANALYZE = false;

export default [
  // browser-friendly UMD build
  {
    input: 'src/main.js',
    output: [
      {
        name: 'MotorCortex',
        file: pkg.browser,
        format: 'umd',
        exports: 'named',
      },
      {
        file: `${pkg.module.split('.js')[0]}.min.js`,
        format: 'es',
        // exports: 'named',
      },
    ],
    plugins: [
      json(),
      babel({ babelHelpers: 'bundled' }),
      replace({
        values: {
          'process.env.NODE_ENV': '"production"',
          'process.env["NODE_ENV"]': '"production"',
          "process.env['NODE_ENV']": '"production"',
        },
        preventAssignment: true,
      }),
      commonjs(),
      resolve(),
      terser(),
      visualizer(),
      cleanup({ comments: 'none' }),
      ANALYZE && analyze(),
    ],
  },
  {
    input: 'src/main.js',
    external: [...Object.keys(pkg.dependencies), /@babel\/runtime/],
    output: [
      { file: pkg.main, format: 'cjs', exports: 'named' },
      { file: pkg.module, format: 'es', exports: 'named' },
    ],
    plugins: [
      json(),
      babel({
        babelHelpers: 'runtime',
        plugins: ['@babel/plugin-transform-runtime'],
      }),
      replace({
        values: {
          'process.env.NODE_ENV': '"production"',
          'process.env["NODE_ENV"]': '"production"',
          "process.env['NODE_ENV']": '"production"',
        },
        preventAssignment: true,
      }),
      commonjs(),
    ],
  },
];
